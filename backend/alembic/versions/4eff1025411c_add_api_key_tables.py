"""add_api_key_tables

Revision ID: 4eff1025411c
Revises: 8d8ac3df4c7b
Create Date: 2025-09-06 12:46:22.308961

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '4eff1025411c'
down_revision = '8d8ac3df4c7b'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create api_keys table
    op.create_table('api_keys',
        sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
        sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
        sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
        sa.Column('name', sa.String(length=255), nullable=False, comment='Human-readable name for the API key'),
        sa.Column('description', sa.Text(), nullable=True, comment='Description of API key purpose'),
        sa.Column('key_hash', sa.String(length=255), nullable=False, comment='Hashed API key for security'),
        sa.Column('key_prefix', sa.String(length=20), nullable=False, comment='Visible prefix of the API key'),
        sa.Column('scope', sa.String(length=50), nullable=False, comment='API key access scope'),
        sa.Column('allowed_ips', sa.Text(), nullable=True, comment='Comma-separated list of allowed IP addresses'),
        sa.Column('rate_limit_per_minute', sa.Integer(), nullable=False, comment='Maximum requests per minute'),
        sa.Column('rate_limit_per_hour', sa.Integer(), nullable=False, comment='Maximum requests per hour'),
        sa.Column('rate_limit_per_day', sa.Integer(), nullable=False, comment='Maximum requests per day'),
        sa.Column('status', sa.String(length=20), nullable=False, comment='Current status of the API key'),
        sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='API key expiration date'),
        sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True, comment='Last time the API key was used'),
        sa.Column('total_requests', sa.Integer(), nullable=False, comment='Total number of requests made with this key'),
        sa.Column('user_agent', sa.String(length=500), nullable=True, comment='Last user agent that used this key'),
        sa.Column('last_ip_address', sa.String(length=45), nullable=True, comment='Last IP address that used this key'),
        sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('key_hash')
    )
    
    # Create api_key_usage table
    op.create_table('api_key_usage',
        sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
        sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
        sa.Column('api_key_id', sa.UUID(), nullable=False, comment='Reference to API key'),
        sa.Column('usage_date', sa.DateTime(timezone=True), nullable=False, comment='Date of usage tracking'),
        sa.Column('usage_hour', sa.Integer(), nullable=False, comment='Hour of the day (0-23)'),
        sa.Column('usage_minute', sa.Integer(), nullable=False, comment='Minute of the hour (0-59)'),
        sa.Column('requests_count', sa.Integer(), nullable=False, comment='Number of requests in this time period'),
        sa.Column('endpoint', sa.String(length=255), nullable=True, comment='API endpoint accessed'),
        sa.Column('method', sa.String(length=10), nullable=True, comment='HTTP method used'),
        sa.Column('status_code', sa.Integer(), nullable=True, comment='HTTP response status code'),
        sa.ForeignKeyConstraint(['api_key_id'], ['api_keys.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create webhook_endpoints table
    op.create_table('webhook_endpoints',
        sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
        sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
        sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
        sa.Column('api_key_id', sa.UUID(), nullable=False, comment='Reference to API key'),
        sa.Column('name', sa.String(length=255), nullable=False, comment='Human-readable name for the webhook'),
        sa.Column('url', sa.String(length=500), nullable=False, comment='Webhook endpoint URL'),
        sa.Column('secret', sa.String(length=255), nullable=True, comment='Webhook secret for signature verification'),
        sa.Column('events', sa.Text(), nullable=False, comment='Comma-separated list of events to subscribe to'),
        sa.Column('retry_count', sa.Integer(), nullable=False, comment='Number of retry attempts for failed deliveries'),
        sa.Column('timeout_seconds', sa.Integer(), nullable=False, comment='Timeout for webhook requests in seconds'),
        sa.Column('last_delivery_at', sa.DateTime(timezone=True), nullable=True, comment='Last successful delivery timestamp'),
        sa.Column('total_deliveries', sa.Integer(), nullable=False, comment='Total number of webhook deliveries'),
        sa.Column('failed_deliveries', sa.Integer(), nullable=False, comment='Number of failed deliveries'),
        sa.ForeignKeyConstraint(['api_key_id'], ['api_keys.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create indexes
    op.create_index('idx_api_key_tenant_id', 'api_keys', ['tenant_id'], unique=False)
    op.create_index('idx_api_key_key_hash', 'api_keys', ['key_hash'], unique=False)
    op.create_index('idx_api_key_status', 'api_keys', ['status'], unique=False)
    op.create_index('idx_api_key_expires_at', 'api_keys', ['expires_at'], unique=False)
    op.create_index('idx_api_key_usage_api_key_id', 'api_key_usage', ['api_key_id'], unique=False)
    op.create_index('idx_api_key_usage_date', 'api_key_usage', ['usage_date'], unique=False)
    op.create_index('idx_webhook_endpoint_tenant_id', 'webhook_endpoints', ['tenant_id'], unique=False)
    op.create_index('idx_webhook_endpoint_api_key_id', 'webhook_endpoints', ['api_key_id'], unique=False)
    op.create_index('idx_webhook_endpoint_is_active', 'webhook_endpoints', ['is_active'], unique=False)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop indexes
    op.drop_index('idx_webhook_endpoint_is_active', table_name='webhook_endpoints')
    op.drop_index('idx_webhook_endpoint_api_key_id', table_name='webhook_endpoints')
    op.drop_index('idx_webhook_endpoint_tenant_id', table_name='webhook_endpoints')
    op.drop_index('idx_api_key_usage_date', table_name='api_key_usage')
    op.drop_index('idx_api_key_usage_api_key_id', table_name='api_key_usage')
    op.drop_index('idx_api_key_expires_at', table_name='api_keys')
    op.drop_index('idx_api_key_status', table_name='api_keys')
    op.drop_index('idx_api_key_key_hash', table_name='api_keys')
    op.drop_index('idx_api_key_tenant_id', table_name='api_keys')
    
    # Drop tables
    op.drop_table('webhook_endpoints')
    op.drop_table('api_key_usage')
    op.drop_table('api_keys')
    
    # ### end Alembic commands ###