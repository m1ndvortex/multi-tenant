"""Add bank reconciliation tables

Revision ID: 3b9892432da4
Revises: 572646850d0a
Create Date: 2025-09-04 17:40:58.759905

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '3b9892432da4'
down_revision = '572646850d0a'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_stock_movement_created_at', table_name='stock_movements')
    op.drop_index('idx_stock_movement_reference', table_name='stock_movements')
    op.drop_index('idx_stock_movement_tenant_product', table_name='stock_movements')
    op.drop_index('idx_stock_movement_type', table_name='stock_movements')
    op.drop_index('ix_stock_movements_tenant_id', table_name='stock_movements')
    op.drop_table('stock_movements')
    op.drop_index('idx_activity_log_ip', table_name='activity_logs')
    op.drop_index('idx_activity_log_status', table_name='activity_logs')
    op.drop_index('idx_activity_log_tenant_action', table_name='activity_logs')
    op.drop_index('idx_activity_log_tenant_date', table_name='activity_logs')
    op.drop_index('idx_activity_log_tenant_resource', table_name='activity_logs')
    op.drop_index('idx_activity_log_tenant_user', table_name='activity_logs')
    op.drop_index('ix_activity_logs_action', table_name='activity_logs')
    op.drop_index('ix_activity_logs_resource_id', table_name='activity_logs')
    op.drop_index('ix_activity_logs_resource_type', table_name='activity_logs')
    op.drop_index('ix_activity_logs_tenant_id', table_name='activity_logs')
    op.drop_index('ix_activity_logs_user_id', table_name='activity_logs')
    op.drop_table('activity_logs')
    op.add_column('bank_accounts', sa.Column('bank_balance', sa.Numeric(precision=15, scale=2), nullable=False, comment='Current bank balance from last statement'))
    op.add_column('bank_accounts', sa.Column('unreconciled_difference', sa.Numeric(precision=15, scale=2), nullable=False, comment='Difference between book and bank balance'))
    op.alter_column('bank_accounts', 'current_balance',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Current book balance',
               existing_comment='Current balance from bank',
               existing_nullable=False)
    op.alter_column('bank_accounts', 'currency',
               existing_type=sa.VARCHAR(length=3),
               comment='Account currency code',
               existing_comment='Account currency (ISO code)',
               existing_nullable=False)
    op.alter_column('bank_accounts', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Whether account is active',
               existing_comment='Soft delete flag',
               existing_nullable=False)
    op.drop_index('idx_bank_account_tenant', table_name='bank_accounts')
    op.create_index('idx_bank_account_tenant_active', 'bank_accounts', ['tenant_id', 'is_active'], unique=False)
    op.drop_constraint('bank_accounts_chart_account_id_fkey', 'bank_accounts', type_='foreignkey')
    op.drop_column('bank_accounts', 'book_balance')
    op.drop_column('bank_accounts', 'chart_account_id')
    op.drop_column('bank_accounts', 'opening_balance')
    op.add_column('bank_reconciliation_items', sa.Column('reference_date', sa.DateTime(timezone=True), nullable=True, comment='Date of referenced transaction'))
    op.add_column('bank_reconciliation_items', sa.Column('transaction_id', sa.UUID(), nullable=True, comment='Related book transaction ID'))
    op.alter_column('bank_reconciliation_items', 'item_type',
               existing_type=sa.VARCHAR(length=50),
               comment='Type: outstanding_deposit, outstanding_check, bank_charge, interest, adjustment',
               existing_comment='Type: outstanding_check, deposit_in_transit, bank_charge, interest, adjustment',
               existing_nullable=False)
    op.alter_column('bank_reconciliation_items', 'bank_transaction_id',
               existing_type=sa.UUID(),
               comment='Related bank transaction ID',
               existing_comment='Related bank transaction',
               existing_nullable=True)
    op.alter_column('bank_reconciliation_items', 'is_cleared',
               existing_type=sa.BOOLEAN(),
               comment='Whether item has cleared the bank',
               existing_comment='Whether item has cleared in subsequent periods',
               existing_nullable=False)
    op.drop_constraint('bank_reconciliation_items_book_transaction_id_fkey', 'bank_reconciliation_items', type_='foreignkey')
    op.create_foreign_key(None, 'bank_reconciliation_items', 'transactions', ['transaction_id'], ['id'])
    op.drop_column('bank_reconciliation_items', 'notes')
    op.drop_column('bank_reconciliation_items', 'book_transaction_id')
    op.drop_column('bank_reconciliation_items', 'transaction_date')
    op.add_column('bank_reconciliations', sa.Column('statement_date', sa.DateTime(timezone=True), nullable=False, comment='Bank statement date being reconciled'))
    op.add_column('bank_reconciliations', sa.Column('bank_balance', sa.Numeric(precision=15, scale=2), nullable=False, comment='Bank balance from statement'))
    op.add_column('bank_reconciliations', sa.Column('adjusted_bank_balance', sa.Numeric(precision=15, scale=2), nullable=False, comment='Bank balance after adjustments'))
    op.add_column('bank_reconciliations', sa.Column('is_finalized', sa.Boolean(), nullable=False, comment='Whether reconciliation is finalized'))
    op.add_column('bank_reconciliations', sa.Column('finalized_date', sa.DateTime(timezone=True), nullable=True, comment='Date when reconciliation was finalized'))
    op.add_column('bank_reconciliations', sa.Column('finalized_by', sa.UUID(), nullable=True, comment='User who finalized the reconciliation'))
    op.add_column('bank_reconciliations', sa.Column('created_by', sa.UUID(), nullable=True, comment='User who created the reconciliation'))
    op.alter_column('bank_reconciliations', 'book_balance',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Book balance at reconciliation date',
               existing_comment='Balance per books',
               existing_nullable=False)
    op.alter_column('bank_reconciliations', 'outstanding_deposits',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Outstanding deposits (in transit)',
               existing_comment='Total outstanding deposits',
               existing_nullable=False)
    op.alter_column('bank_reconciliations', 'outstanding_checks',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Outstanding checks (not yet cleared)',
               existing_comment='Total outstanding checks',
               existing_nullable=False)
    op.alter_column('bank_reconciliations', 'bank_charges',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Bank charges not yet recorded in books',
               existing_comment='Bank charges not yet recorded',
               existing_nullable=False)
    op.alter_column('bank_reconciliations', 'interest_earned',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Interest earned not yet recorded in books',
               existing_comment='Interest earned not yet recorded',
               existing_nullable=False)
    op.alter_column('bank_reconciliations', 'adjusted_book_balance',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Book balance after adjustments',
               existing_comment='Adjusted book balance after reconciliation',
               existing_nullable=False)
    op.drop_index('idx_bank_reconciliation_account', table_name='bank_reconciliations')
    op.drop_index('idx_bank_reconciliation_status', table_name='bank_reconciliations')
    op.create_index('idx_bank_reconciliation_finalized', 'bank_reconciliations', ['is_finalized'], unique=False)
    op.create_index('idx_bank_reconciliation_tenant_account', 'bank_reconciliations', ['tenant_id', 'bank_account_id'], unique=False)
    op.drop_column('bank_reconciliations', 'reviewed_by')
    op.drop_column('bank_reconciliations', 'status')
    op.drop_column('bank_reconciliations', 'reviewed_at')
    op.drop_column('bank_reconciliations', 'completed_at')
    op.drop_column('bank_reconciliations', 'bank_statement_balance')
    op.drop_column('bank_reconciliations', 'variance')
    op.drop_column('bank_reconciliations', 'period_start')
    op.drop_column('bank_reconciliations', 'prepared_by')
    op.drop_column('bank_reconciliations', 'period_end')
    op.add_column('bank_statements', sa.Column('processed_transactions', sa.Integer(), nullable=False, comment='Number of successfully processed transactions'))
    op.add_column('bank_statements', sa.Column('failed_transactions', sa.Integer(), nullable=False, comment='Number of failed transactions'))
    op.add_column('bank_statements', sa.Column('processing_errors', sa.Text(), nullable=True, comment='Processing error details'))
    op.alter_column('bank_statements', 'file_format',
               existing_type=sa.VARCHAR(length=20),
               comment='File format: csv, excel, etc.',
               existing_comment='File format: csv, excel, qif, ofx',
               existing_nullable=True)
    op.alter_column('bank_statements', 'total_transactions',
               existing_type=sa.INTEGER(),
               comment='Total number of transactions in statement',
               existing_comment='Total number of transactions',
               existing_nullable=False)
    op.drop_index('idx_bank_statement_status', table_name='bank_statements')
    op.drop_index('ix_bank_statements_tenant_id', table_name='bank_statements')
    op.drop_constraint('bank_statements_tenant_id_fkey', 'bank_statements', type_='foreignkey')
    op.drop_column('bank_statements', 'tenant_id')
    op.drop_column('bank_statements', 'matched_transactions')
    op.drop_column('bank_statements', 'notes')
    op.drop_column('bank_statements', 'status')
    op.add_column('bank_transactions', sa.Column('bank_account_id', sa.UUID(), nullable=False, comment='Bank account ID'))
    op.add_column('bank_transactions', sa.Column('debit_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Debit amount (money out)'))
    op.add_column('bank_transactions', sa.Column('credit_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Credit amount (money in)'))
    op.add_column('bank_transactions', sa.Column('match_confidence', sa.Numeric(precision=3, scale=2), nullable=True, comment='Matching confidence score (0.0 to 1.0)'))
    op.add_column('bank_transactions', sa.Column('counterparty', sa.String(length=255), nullable=True, comment='Counterparty name'))
    op.add_column('bank_transactions', sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'))
    op.alter_column('bank_transactions', 'statement_id',
               existing_type=sa.UUID(),
               nullable=True,
               comment='Bank statement ID (if imported from statement)',
               existing_comment='Bank statement ID')
    op.alter_column('bank_transactions', 'is_matched',
               existing_type=sa.BOOLEAN(),
               comment='Whether transaction is matched with book transaction',
               existing_comment='Whether transaction is matched with book records',
               existing_nullable=False)
    op.alter_column('bank_transactions', 'transaction_type',
               existing_type=sa.VARCHAR(length=50),
               comment='Transaction type from bank',
               existing_comment='Transaction type: deposit, withdrawal, transfer, fee, etc.',
               existing_nullable=True)
    op.alter_column('bank_transactions', 'notes',
               existing_type=sa.TEXT(),
               comment='Manual notes',
               existing_comment='Reconciliation notes',
               existing_nullable=True)
    op.drop_index('idx_bank_transaction_status', table_name='bank_transactions')
    op.create_index('idx_bank_transaction_tenant_account', 'bank_transactions', ['tenant_id', 'bank_account_id'], unique=False)
    op.create_index(op.f('ix_bank_transactions_tenant_id'), 'bank_transactions', ['tenant_id'], unique=False)
    op.create_foreign_key(None, 'bank_transactions', 'tenants', ['tenant_id'], ['id'])
    op.create_foreign_key(None, 'bank_transactions', 'bank_accounts', ['bank_account_id'], ['id'])
    op.drop_column('bank_transactions', 'reconciliation_status')
    op.drop_column('bank_transactions', 'amount')
    op.drop_column('bank_transactions', 'raw_data')
    op.drop_column('bank_transactions', 'category')
    op.alter_column('customer_backup_logs', 'task_id',
               existing_type=sa.VARCHAR(length=255),
               comment='Celery task ID for tracking backup progress',
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('customer_backup_logs', 'task_id',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Celery task ID for tracking backup progress',
               existing_nullable=True)
    op.add_column('bank_transactions', sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Transaction category'))
    op.add_column('bank_transactions', sa.Column('raw_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Raw transaction data from import'))
    op.add_column('bank_transactions', sa.Column('amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Transaction amount (positive for credits, negative for debits)'))
    op.add_column('bank_transactions', sa.Column('reconciliation_status', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Status: unmatched, matched, disputed, ignored'))
    op.drop_constraint(None, 'bank_transactions', type_='foreignkey')
    op.drop_constraint(None, 'bank_transactions', type_='foreignkey')
    op.drop_index(op.f('ix_bank_transactions_tenant_id'), table_name='bank_transactions')
    op.drop_index('idx_bank_transaction_tenant_account', table_name='bank_transactions')
    op.create_index('idx_bank_transaction_status', 'bank_transactions', ['reconciliation_status'], unique=False)
    op.alter_column('bank_transactions', 'notes',
               existing_type=sa.TEXT(),
               comment='Reconciliation notes',
               existing_comment='Manual notes',
               existing_nullable=True)
    op.alter_column('bank_transactions', 'transaction_type',
               existing_type=sa.VARCHAR(length=50),
               comment='Transaction type: deposit, withdrawal, transfer, fee, etc.',
               existing_comment='Transaction type from bank',
               existing_nullable=True)
    op.alter_column('bank_transactions', 'is_matched',
               existing_type=sa.BOOLEAN(),
               comment='Whether transaction is matched with book records',
               existing_comment='Whether transaction is matched with book transaction',
               existing_nullable=False)
    op.alter_column('bank_transactions', 'statement_id',
               existing_type=sa.UUID(),
               nullable=False,
               comment='Bank statement ID',
               existing_comment='Bank statement ID (if imported from statement)')
    op.drop_column('bank_transactions', 'tenant_id')
    op.drop_column('bank_transactions', 'counterparty')
    op.drop_column('bank_transactions', 'match_confidence')
    op.drop_column('bank_transactions', 'credit_amount')
    op.drop_column('bank_transactions', 'debit_amount')
    op.drop_column('bank_transactions', 'bank_account_id')
    op.add_column('bank_statements', sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Status: imported, processed, reconciled'))
    op.add_column('bank_statements', sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True, comment='Import notes'))
    op.add_column('bank_statements', sa.Column('matched_transactions', sa.INTEGER(), autoincrement=False, nullable=False, comment='Number of matched transactions'))
    op.add_column('bank_statements', sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False, comment='Tenant ID for multi-tenant data isolation'))
    op.create_foreign_key('bank_statements_tenant_id_fkey', 'bank_statements', 'tenants', ['tenant_id'], ['id'])
    op.create_index('ix_bank_statements_tenant_id', 'bank_statements', ['tenant_id'], unique=False)
    op.create_index('idx_bank_statement_status', 'bank_statements', ['status'], unique=False)
    op.alter_column('bank_statements', 'total_transactions',
               existing_type=sa.INTEGER(),
               comment='Total number of transactions',
               existing_comment='Total number of transactions in statement',
               existing_nullable=False)
    op.alter_column('bank_statements', 'file_format',
               existing_type=sa.VARCHAR(length=20),
               comment='File format: csv, excel, qif, ofx',
               existing_comment='File format: csv, excel, etc.',
               existing_nullable=True)
    op.drop_column('bank_statements', 'processing_errors')
    op.drop_column('bank_statements', 'failed_transactions')
    op.drop_column('bank_statements', 'processed_transactions')
    op.add_column('bank_reconciliations', sa.Column('period_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False, comment='Reconciliation period end'))
    op.add_column('bank_reconciliations', sa.Column('prepared_by', sa.UUID(), autoincrement=False, nullable=True, comment='User who prepared the reconciliation'))
    op.add_column('bank_reconciliations', sa.Column('period_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False, comment='Reconciliation period start'))
    op.add_column('bank_reconciliations', sa.Column('variance', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Reconciliation variance (should be zero when balanced)'))
    op.add_column('bank_reconciliations', sa.Column('bank_statement_balance', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Balance per bank statement'))
    op.add_column('bank_reconciliations', sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Completion timestamp'))
    op.add_column('bank_reconciliations', sa.Column('reviewed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Review timestamp'))
    op.add_column('bank_reconciliations', sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Status: in_progress, completed, reviewed'))
    op.add_column('bank_reconciliations', sa.Column('reviewed_by', sa.UUID(), autoincrement=False, nullable=True, comment='User who reviewed the reconciliation'))
    op.drop_index('idx_bank_reconciliation_tenant_account', table_name='bank_reconciliations')
    op.drop_index('idx_bank_reconciliation_finalized', table_name='bank_reconciliations')
    op.create_index('idx_bank_reconciliation_status', 'bank_reconciliations', ['status'], unique=False)
    op.create_index('idx_bank_reconciliation_account', 'bank_reconciliations', ['bank_account_id'], unique=False)
    op.alter_column('bank_reconciliations', 'adjusted_book_balance',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Adjusted book balance after reconciliation',
               existing_comment='Book balance after adjustments',
               existing_nullable=False)
    op.alter_column('bank_reconciliations', 'interest_earned',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Interest earned not yet recorded',
               existing_comment='Interest earned not yet recorded in books',
               existing_nullable=False)
    op.alter_column('bank_reconciliations', 'bank_charges',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Bank charges not yet recorded',
               existing_comment='Bank charges not yet recorded in books',
               existing_nullable=False)
    op.alter_column('bank_reconciliations', 'outstanding_checks',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Total outstanding checks',
               existing_comment='Outstanding checks (not yet cleared)',
               existing_nullable=False)
    op.alter_column('bank_reconciliations', 'outstanding_deposits',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Total outstanding deposits',
               existing_comment='Outstanding deposits (in transit)',
               existing_nullable=False)
    op.alter_column('bank_reconciliations', 'book_balance',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Balance per books',
               existing_comment='Book balance at reconciliation date',
               existing_nullable=False)
    op.drop_column('bank_reconciliations', 'created_by')
    op.drop_column('bank_reconciliations', 'finalized_by')
    op.drop_column('bank_reconciliations', 'finalized_date')
    op.drop_column('bank_reconciliations', 'is_finalized')
    op.drop_column('bank_reconciliations', 'adjusted_bank_balance')
    op.drop_column('bank_reconciliations', 'bank_balance')
    op.drop_column('bank_reconciliations', 'statement_date')
    op.add_column('bank_reconciliation_items', sa.Column('transaction_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Original transaction date'))
    op.add_column('bank_reconciliation_items', sa.Column('book_transaction_id', sa.UUID(), autoincrement=False, nullable=True, comment='Related book transaction'))
    op.add_column('bank_reconciliation_items', sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True, comment='Item notes'))
    op.drop_constraint(None, 'bank_reconciliation_items', type_='foreignkey')
    op.create_foreign_key('bank_reconciliation_items_book_transaction_id_fkey', 'bank_reconciliation_items', 'transactions', ['book_transaction_id'], ['id'])
    op.alter_column('bank_reconciliation_items', 'is_cleared',
               existing_type=sa.BOOLEAN(),
               comment='Whether item has cleared in subsequent periods',
               existing_comment='Whether item has cleared the bank',
               existing_nullable=False)
    op.alter_column('bank_reconciliation_items', 'bank_transaction_id',
               existing_type=sa.UUID(),
               comment='Related bank transaction',
               existing_comment='Related bank transaction ID',
               existing_nullable=True)
    op.alter_column('bank_reconciliation_items', 'item_type',
               existing_type=sa.VARCHAR(length=50),
               comment='Type: outstanding_check, deposit_in_transit, bank_charge, interest, adjustment',
               existing_comment='Type: outstanding_deposit, outstanding_check, bank_charge, interest, adjustment',
               existing_nullable=False)
    op.drop_column('bank_reconciliation_items', 'transaction_id')
    op.drop_column('bank_reconciliation_items', 'reference_date')
    op.add_column('bank_accounts', sa.Column('opening_balance', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Opening balance'))
    op.add_column('bank_accounts', sa.Column('chart_account_id', sa.UUID(), autoincrement=False, nullable=True, comment='Linked chart of accounts account'))
    op.add_column('bank_accounts', sa.Column('book_balance', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Book balance from our records'))
    op.create_foreign_key('bank_accounts_chart_account_id_fkey', 'bank_accounts', 'accounts', ['chart_account_id'], ['id'])
    op.drop_index('idx_bank_account_tenant_active', table_name='bank_accounts')
    op.create_index('idx_bank_account_tenant', 'bank_accounts', ['tenant_id'], unique=False)
    op.alter_column('bank_accounts', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Soft delete flag',
               existing_comment='Whether account is active',
               existing_nullable=False)
    op.alter_column('bank_accounts', 'currency',
               existing_type=sa.VARCHAR(length=3),
               comment='Account currency (ISO code)',
               existing_comment='Account currency code',
               existing_nullable=False)
    op.alter_column('bank_accounts', 'current_balance',
               existing_type=sa.NUMERIC(precision=15, scale=2),
               comment='Current balance from bank',
               existing_comment='Current book balance',
               existing_nullable=False)
    op.drop_column('bank_accounts', 'unreconciled_difference')
    op.drop_column('bank_accounts', 'bank_balance')
    op.create_table('activity_logs',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True, comment='User who performed the action (null for system actions)'),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment="Action type (e.g., 'user_created', 'invoice_updated')"),
    sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment="Type of resource affected (e.g., 'user', 'invoice', 'customer')"),
    sa.Column('resource_id', sa.UUID(), autoincrement=False, nullable=True, comment='ID of the affected resource'),
    sa.Column('details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='JSON object with action details and metadata'),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True, comment='IP address of the request'),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True, comment='User agent string from the request'),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Session identifier'),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Action status (success, failed, pending)'),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True, comment='Error message if action failed'),
    sa.Column('duration_ms', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Action duration in milliseconds'),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='activity_logs_tenant_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='activity_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='activity_logs_pkey')
    )
    op.create_index('ix_activity_logs_user_id', 'activity_logs', ['user_id'], unique=False)
    op.create_index('ix_activity_logs_tenant_id', 'activity_logs', ['tenant_id'], unique=False)
    op.create_index('ix_activity_logs_resource_type', 'activity_logs', ['resource_type'], unique=False)
    op.create_index('ix_activity_logs_resource_id', 'activity_logs', ['resource_id'], unique=False)
    op.create_index('ix_activity_logs_action', 'activity_logs', ['action'], unique=False)
    op.create_index('idx_activity_log_tenant_user', 'activity_logs', ['tenant_id', 'user_id'], unique=False)
    op.create_index('idx_activity_log_tenant_resource', 'activity_logs', ['tenant_id', 'resource_type', 'resource_id'], unique=False)
    op.create_index('idx_activity_log_tenant_date', 'activity_logs', ['tenant_id', 'created_at'], unique=False)
    op.create_index('idx_activity_log_tenant_action', 'activity_logs', ['tenant_id', 'action'], unique=False)
    op.create_index('idx_activity_log_status', 'activity_logs', ['status'], unique=False)
    op.create_index('idx_activity_log_ip', 'activity_logs', ['ip_address'], unique=False)
    op.create_table('stock_movements',
    sa.Column('product_id', sa.UUID(), autoincrement=False, nullable=False, comment='Product ID'),
    sa.Column('movement_type', postgresql.ENUM('PURCHASE', 'SALE', 'ADJUSTMENT', 'RETURN', 'TRANSFER', 'DAMAGE', 'EXPIRED', name='stockmovementtype'), autoincrement=False, nullable=False, comment='Type of stock movement'),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False, comment='Quantity moved (positive for in, negative for out)'),
    sa.Column('stock_before', sa.INTEGER(), autoincrement=False, nullable=False, comment='Stock quantity before movement'),
    sa.Column('stock_after', sa.INTEGER(), autoincrement=False, nullable=False, comment='Stock quantity after movement'),
    sa.Column('reference_id', sa.UUID(), autoincrement=False, nullable=True, comment='Reference ID (invoice, purchase order, etc.)'),
    sa.Column('reference_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Reference type (invoice, purchase_order, adjustment, etc.)'),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True, comment='Movement notes'),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False, comment='User who created the movement'),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='stock_movements_created_by_fkey'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='stock_movements_product_id_fkey'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='stock_movements_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='stock_movements_pkey')
    )
    op.create_index('ix_stock_movements_tenant_id', 'stock_movements', ['tenant_id'], unique=False)
    op.create_index('idx_stock_movement_type', 'stock_movements', ['movement_type'], unique=False)
    op.create_index('idx_stock_movement_tenant_product', 'stock_movements', ['tenant_id', 'product_id'], unique=False)
    op.create_index('idx_stock_movement_reference', 'stock_movements', ['reference_type', 'reference_id'], unique=False)
    op.create_index('idx_stock_movement_created_at', 'stock_movements', ['created_at'], unique=False)
    # ### end Alembic commands ###