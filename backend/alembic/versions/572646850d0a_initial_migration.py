"""Initial migration

Revision ID: 572646850d0a
Revises: efbc6dbd851d
Create Date: 2025-08-31 14:19:52.456092

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '572646850d0a'
down_revision = 'efbc6dbd851d'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('installment_plans',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Plan name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Plan description'),
    sa.Column('installment_type', sa.Enum('GENERAL', 'GOLD', name='installmenttype'), nullable=False, comment='Type of installment plan'),
    sa.Column('number_of_installments', sa.Integer(), nullable=False, comment='Number of installments'),
    sa.Column('interval_days', sa.Integer(), nullable=False, comment='Days between installments'),
    sa.Column('default_interest_rate', sa.Numeric(precision=5, scale=2), nullable=False, comment='Default interest rate percentage'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether plan is active'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_installment_plan_active', 'installment_plans', ['is_active'], unique=False)
    op.create_index('idx_installment_plan_type', 'installment_plans', ['installment_type'], unique=False)
    op.create_table('storage_locations',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Storage location name'),
    sa.Column('provider', sa.Enum('CLOUDFLARE_R2', 'BACKBLAZE_B2', 'LOCAL', name='storageprovider'), nullable=False, comment='Storage provider'),
    sa.Column('endpoint', sa.String(length=500), nullable=True, comment='Storage endpoint URL'),
    sa.Column('bucket_name', sa.String(length=255), nullable=True, comment='Bucket or container name'),
    sa.Column('access_key', sa.String(length=255), nullable=True, comment='Access key (encrypted)'),
    sa.Column('secret_key', sa.String(length=255), nullable=True, comment='Secret key (encrypted)'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether location is active'),
    sa.Column('is_primary', sa.Boolean(), nullable=False, comment='Whether this is the primary storage location'),
    sa.Column('total_backups', sa.Integer(), nullable=False, comment='Total number of backups stored'),
    sa.Column('total_size', sa.Numeric(precision=15, scale=0), nullable=False, comment='Total storage used in bytes'),
    sa.Column('last_backup_at', sa.DateTime(timezone=True), nullable=True, comment='Last backup timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_storage_location_active', 'storage_locations', ['is_active'], unique=False)
    op.create_index('idx_storage_location_primary', 'storage_locations', ['is_primary'], unique=False)
    op.create_index('idx_storage_location_provider', 'storage_locations', ['provider'], unique=False)
    op.create_table('tenants',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Business/Company name'),
    sa.Column('domain', sa.String(length=255), nullable=True, comment='Custom domain for tenant (optional)'),
    sa.Column('email', sa.String(length=255), nullable=False, comment='Primary contact email'),
    sa.Column('phone', sa.String(length=50), nullable=True, comment='Primary contact phone'),
    sa.Column('address', sa.Text(), nullable=True, comment='Business address'),
    sa.Column('subscription_type', sa.Enum('FREE', 'PRO', 'ENTERPRISE', name='subscriptiontype'), nullable=False, comment='Current subscription tier'),
    sa.Column('subscription_starts_at', sa.DateTime(timezone=True), nullable=True, comment='Subscription start date'),
    sa.Column('subscription_expires_at', sa.DateTime(timezone=True), nullable=True, comment='Subscription expiration date'),
    sa.Column('status', sa.Enum('PENDING', 'ACTIVE', 'SUSPENDED', 'CANCELLED', name='tenantstatus'), nullable=False, comment='Current tenant status'),
    sa.Column('max_users', sa.Integer(), nullable=False, comment='Maximum allowed users'),
    sa.Column('max_products', sa.Integer(), nullable=False, comment='Maximum allowed products'),
    sa.Column('max_customers', sa.Integer(), nullable=False, comment='Maximum allowed customers'),
    sa.Column('max_monthly_invoices', sa.Integer(), nullable=False, comment='Maximum monthly invoices'),
    sa.Column('business_type', sa.String(length=100), nullable=True, comment='Type of business (general, gold, etc.)'),
    sa.Column('currency', sa.String(length=10), nullable=False, comment='Primary currency code'),
    sa.Column('timezone', sa.String(length=50), nullable=False, comment='Business timezone'),
    sa.Column('settings', sa.Text(), nullable=True, comment='JSON settings for tenant customization'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Admin notes about tenant'),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), nullable=True, comment='Last user activity timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('domain')
    )
    op.create_index('idx_tenant_domain', 'tenants', ['domain'], unique=False)
    op.create_index('idx_tenant_email', 'tenants', ['email'], unique=False)
    op.create_index('idx_tenant_last_activity', 'tenants', ['last_activity_at'], unique=False)
    op.create_index('idx_tenant_status', 'tenants', ['status'], unique=False)
    op.create_index('idx_tenant_subscription_expires', 'tenants', ['subscription_expires_at'], unique=False)
    op.create_index('idx_tenant_subscription_type', 'tenants', ['subscription_type'], unique=False)
    op.create_table('accounts',
    sa.Column('account_code', sa.String(length=20), nullable=False, comment='Account code (e.g., 1001, 2001)'),
    sa.Column('account_name', sa.String(length=255), nullable=False, comment='Account name'),
    sa.Column('account_type', sa.Enum('ASSET', 'LIABILITY', 'EQUITY', 'REVENUE', 'EXPENSE', name='accounttype'), nullable=False, comment='Type of account'),
    sa.Column('parent_id', sa.UUID(), nullable=True, comment='Parent account for hierarchical structure'),
    sa.Column('is_system_account', sa.Boolean(), nullable=False, comment='Whether this is a system-generated account'),
    sa.Column('is_control_account', sa.Boolean(), nullable=False, comment='Whether this is a control account'),
    sa.Column('allow_posting', sa.Boolean(), nullable=False, comment='Whether direct posting is allowed'),
    sa.Column('opening_balance', sa.Numeric(precision=15, scale=2), nullable=False, comment='Opening balance'),
    sa.Column('current_balance', sa.Numeric(precision=15, scale=2), nullable=False, comment='Current balance'),
    sa.Column('description', sa.Text(), nullable=True, comment='Account description'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['parent_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_account_parent', 'accounts', ['parent_id'], unique=False)
    op.create_index('idx_account_tenant_code', 'accounts', ['tenant_id', 'account_code'], unique=True)
    op.create_index('idx_account_tenant_type', 'accounts', ['tenant_id', 'account_type'], unique=False)
    op.create_index(op.f('ix_accounts_tenant_id'), 'accounts', ['tenant_id'], unique=False)
    op.create_table('backup_logs',
    sa.Column('backup_type', sa.Enum('TENANT_DAILY', 'FULL_PLATFORM', 'MANUAL', name='backuptype'), nullable=False, comment='Type of backup'),
    sa.Column('status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELLED', name='backupstatus'), nullable=False, comment='Backup status'),
    sa.Column('tenant_id', sa.UUID(), nullable=True, comment='Tenant ID (for tenant-specific backups)'),
    sa.Column('backup_name', sa.String(length=255), nullable=False, comment='Backup file name'),
    sa.Column('backup_path', sa.String(length=500), nullable=True, comment='Local backup file path'),
    sa.Column('file_size', sa.Numeric(precision=15, scale=0), nullable=True, comment='Backup file size in bytes'),
    sa.Column('compressed_size', sa.Numeric(precision=15, scale=0), nullable=True, comment='Compressed file size in bytes'),
    sa.Column('checksum', sa.String(length=255), nullable=True, comment='File checksum for integrity verification'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=False, comment='Backup start time'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='Backup completion time'),
    sa.Column('duration_seconds', sa.Integer(), nullable=True, comment='Backup duration in seconds'),
    sa.Column('storage_locations', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='List of storage locations where backup is stored'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if backup failed'),
    sa.Column('backup_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional backup metadata'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_backup_log_completed_at', 'backup_logs', ['completed_at'], unique=False)
    op.create_index('idx_backup_log_started_at', 'backup_logs', ['started_at'], unique=False)
    op.create_index('idx_backup_log_status', 'backup_logs', ['status'], unique=False)
    op.create_index('idx_backup_log_tenant', 'backup_logs', ['tenant_id'], unique=False)
    op.create_index('idx_backup_log_type', 'backup_logs', ['backup_type'], unique=False)
    op.create_table('customers',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Customer full name or business name'),
    sa.Column('email', sa.String(length=255), nullable=True, comment='Customer email address'),
    sa.Column('phone', sa.String(length=50), nullable=True, comment='Customer phone number'),
    sa.Column('mobile', sa.String(length=50), nullable=True, comment='Customer mobile number'),
    sa.Column('address', sa.Text(), nullable=True, comment='Customer address'),
    sa.Column('city', sa.String(length=100), nullable=True, comment='Customer city'),
    sa.Column('state', sa.String(length=100), nullable=True, comment='Customer state/province'),
    sa.Column('postal_code', sa.String(length=20), nullable=True, comment='Customer postal code'),
    sa.Column('country', sa.String(length=100), nullable=False, comment='Customer country'),
    sa.Column('customer_type', sa.Enum('INDIVIDUAL', 'BUSINESS', 'VIP', name='customertype'), nullable=False, comment='Type of customer'),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'BLOCKED', name='customerstatus'), nullable=False, comment='Customer status'),
    sa.Column('credit_limit', sa.Numeric(precision=15, scale=2), nullable=False, comment='Customer credit limit'),
    sa.Column('total_debt', sa.Numeric(precision=15, scale=2), nullable=False, comment='Total outstanding debt in currency'),
    sa.Column('total_gold_debt', sa.Numeric(precision=10, scale=3), nullable=False, comment='Total outstanding debt in gold grams'),
    sa.Column('total_purchases', sa.Numeric(precision=15, scale=2), nullable=False, comment='Total lifetime purchases'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Customer tags for segmentation'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes about customer'),
    sa.Column('preferred_contact_method', sa.String(length=20), nullable=False, comment='Preferred contact method (phone, email, sms)'),
    sa.Column('email_notifications', sa.Boolean(), nullable=False, comment='Allow email notifications'),
    sa.Column('sms_notifications', sa.Boolean(), nullable=False, comment='Allow SMS notifications'),
    sa.Column('business_name', sa.String(length=255), nullable=True, comment='Business name (if business customer)'),
    sa.Column('tax_id', sa.String(length=50), nullable=True, comment='Tax identification number'),
    sa.Column('business_type', sa.String(length=100), nullable=True, comment='Type of business'),
    sa.Column('last_purchase_at', sa.DateTime(timezone=True), nullable=True, comment='Last purchase date'),
    sa.Column('last_contact_at', sa.DateTime(timezone=True), nullable=True, comment='Last contact date'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_customer_last_purchase', 'customers', ['last_purchase_at'], unique=False)
    op.create_index('idx_customer_tenant_email', 'customers', ['tenant_id', 'email'], unique=False)
    op.create_index('idx_customer_tenant_name', 'customers', ['tenant_id', 'name'], unique=False)
    op.create_index('idx_customer_tenant_phone', 'customers', ['tenant_id', 'phone'], unique=False)
    op.create_index('idx_customer_tenant_status', 'customers', ['tenant_id', 'status'], unique=False)
    op.create_index('idx_customer_tenant_type', 'customers', ['tenant_id', 'customer_type'], unique=False)
    op.create_index('idx_customer_total_debt', 'customers', ['total_debt'], unique=False)
    op.create_index('idx_customer_total_gold_debt', 'customers', ['total_gold_debt'], unique=False)
    op.create_index(op.f('ix_customers_tenant_id'), 'customers', ['tenant_id'], unique=False)
    op.create_table('gold_price_history',
    sa.Column('price_date', sa.DateTime(timezone=True), nullable=False, comment='Historical price date'),
    sa.Column('opening_price', sa.Numeric(precision=15, scale=2), nullable=True, comment='Opening price for the day'),
    sa.Column('closing_price', sa.Numeric(precision=15, scale=2), nullable=False, comment='Closing price for the day'),
    sa.Column('high_price', sa.Numeric(precision=15, scale=2), nullable=True, comment='Highest price for the day'),
    sa.Column('low_price', sa.Numeric(precision=15, scale=2), nullable=True, comment='Lowest price for the day'),
    sa.Column('gold_purity', sa.Numeric(precision=5, scale=3), nullable=False, comment='Gold purity'),
    sa.Column('currency', sa.String(length=10), nullable=False, comment='Currency code'),
    sa.Column('transaction_count', sa.Integer(), nullable=False, comment='Number of transactions on this date'),
    sa.Column('total_weight_sold', sa.Numeric(precision=15, scale=3), nullable=False, comment='Total weight sold on this date'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_gold_price_history_date_purity', 'gold_price_history', ['price_date', 'gold_purity'], unique=False)
    op.create_index('idx_gold_price_history_tenant_date', 'gold_price_history', ['tenant_id', 'price_date'], unique=False)
    op.create_index('idx_gold_price_history_tenant_purity', 'gold_price_history', ['tenant_id', 'gold_purity'], unique=False)
    op.create_index(op.f('ix_gold_price_history_tenant_id'), 'gold_price_history', ['tenant_id'], unique=False)
    op.create_table('gold_prices',
    sa.Column('price_date', sa.DateTime(timezone=True), nullable=False, comment='Date of the gold price'),
    sa.Column('price_per_gram', sa.Numeric(precision=15, scale=2), nullable=False, comment="Gold price per gram in tenant's currency"),
    sa.Column('gold_purity', sa.Numeric(precision=5, scale=3), nullable=False, comment='Gold purity (e.g., 18.000 for 18k, 24.000 for pure gold)'),
    sa.Column('source', sa.Enum('MANUAL', 'API', 'IMPORT', name='goldpricesource'), nullable=False, comment='Source of the price data'),
    sa.Column('source_reference', sa.String(length=255), nullable=True, comment='Reference to external source (API endpoint, file, etc.)'),
    sa.Column('market_name', sa.String(length=255), nullable=True, comment='Name of the gold market or exchange'),
    sa.Column('currency', sa.String(length=10), nullable=False, comment='Currency code for the price'),
    sa.Column('buy_price', sa.Numeric(precision=15, scale=2), nullable=True, comment='Buying price per gram'),
    sa.Column('sell_price', sa.Numeric(precision=15, scale=2), nullable=True, comment='Selling price per gram'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether this price is active'),
    sa.Column('is_current', sa.Boolean(), nullable=False, comment='Whether this is the current active price'),
    sa.Column('created_by', sa.UUID(), nullable=True, comment='User who created this price entry'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Notes about this price entry'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_gold_price_source', 'gold_prices', ['source'], unique=False)
    op.create_index('idx_gold_price_tenant_active', 'gold_prices', ['tenant_id', 'is_active'], unique=False)
    op.create_index('idx_gold_price_tenant_current', 'gold_prices', ['tenant_id', 'is_current'], unique=False)
    op.create_index('idx_gold_price_tenant_date', 'gold_prices', ['tenant_id', 'price_date'], unique=False)
    op.create_index('idx_gold_price_tenant_purity', 'gold_prices', ['tenant_id', 'gold_purity'], unique=False)
    op.create_index(op.f('ix_gold_prices_tenant_id'), 'gold_prices', ['tenant_id'], unique=False)
    op.create_table('journal_entries',
    sa.Column('entry_number', sa.String(length=50), nullable=False, comment='Journal entry number'),
    sa.Column('entry_date', sa.DateTime(timezone=True), nullable=False, comment='Entry date'),
    sa.Column('description', sa.Text(), nullable=False, comment='Entry description'),
    sa.Column('reference_type', sa.String(length=50), nullable=True, comment='Type of source document (invoice, payment, etc.)'),
    sa.Column('reference_id', sa.UUID(), nullable=True, comment='ID of source document'),
    sa.Column('reference_number', sa.String(length=100), nullable=True, comment='Reference document number'),
    sa.Column('is_posted', sa.Boolean(), nullable=False, comment='Whether entry is posted'),
    sa.Column('posted_at', sa.DateTime(timezone=True), nullable=True, comment='Posted timestamp'),
    sa.Column('posted_by', sa.UUID(), nullable=True, comment='User who posted the entry'),
    sa.Column('total_debit', sa.Numeric(precision=15, scale=2), nullable=False, comment='Total debit amount'),
    sa.Column('total_credit', sa.Numeric(precision=15, scale=2), nullable=False, comment='Total credit amount'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_journal_entry_posted', 'journal_entries', ['is_posted'], unique=False)
    op.create_index('idx_journal_entry_reference', 'journal_entries', ['reference_type', 'reference_id'], unique=False)
    op.create_index('idx_journal_entry_tenant_date', 'journal_entries', ['tenant_id', 'entry_date'], unique=False)
    op.create_index('idx_journal_entry_tenant_number', 'journal_entries', ['tenant_id', 'entry_number'], unique=True)
    op.create_index(op.f('ix_journal_entries_tenant_id'), 'journal_entries', ['tenant_id'], unique=False)
    op.create_table('notification_templates',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Template name'),
    sa.Column('template_type', sa.Enum('EMAIL', 'SMS', 'PUSH', name='notificationtype'), nullable=False, comment='Type of notification template'),
    sa.Column('subject', sa.String(length=500), nullable=True, comment='Email subject or SMS title'),
    sa.Column('body', sa.Text(), nullable=False, comment='Template body with placeholders'),
    sa.Column('is_system_template', sa.Boolean(), nullable=False, comment='Whether this is a system template'),
    sa.Column('is_default', sa.Boolean(), nullable=False, comment='Whether this is the default template for its type'),
    sa.Column('trigger_event', sa.String(length=100), nullable=True, comment='Event that triggers this template'),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Available template variables'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_notification_template_default', 'notification_templates', ['is_default'], unique=False)
    op.create_index('idx_notification_template_tenant_type', 'notification_templates', ['tenant_id', 'template_type'], unique=False)
    op.create_index('idx_notification_template_trigger', 'notification_templates', ['trigger_event'], unique=False)
    op.create_index(op.f('ix_notification_templates_tenant_id'), 'notification_templates', ['tenant_id'], unique=False)
    op.create_table('product_categories',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Category name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Category description'),
    sa.Column('parent_id', sa.UUID(), nullable=True, comment='Parent category ID for hierarchical structure'),
    sa.Column('sort_order', sa.Integer(), nullable=False, comment='Sort order for display'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['parent_id'], ['product_categories.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_category_parent', 'product_categories', ['parent_id'], unique=False)
    op.create_index('idx_category_tenant_name', 'product_categories', ['tenant_id', 'name'], unique=False)
    op.create_index(op.f('ix_product_categories_tenant_id'), 'product_categories', ['tenant_id'], unique=False)
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False, comment='User email address (unique within tenant)'),
    sa.Column('password_hash', sa.String(length=255), nullable=False, comment='Hashed password'),
    sa.Column('first_name', sa.String(length=100), nullable=False, comment='User first name'),
    sa.Column('last_name', sa.String(length=100), nullable=False, comment='User last name'),
    sa.Column('phone', sa.String(length=50), nullable=True, comment='User phone number'),
    sa.Column('role', sa.Enum('OWNER', 'ADMIN', 'MANAGER', 'USER', 'VIEWER', name='userrole'), nullable=False, comment='User role within tenant'),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'SUSPENDED', 'PENDING', name='userstatus'), nullable=False, comment='User account status'),
    sa.Column('is_email_verified', sa.Boolean(), nullable=False, comment='Email verification status'),
    sa.Column('email_verification_token', sa.String(length=255), nullable=True, comment='Email verification token'),
    sa.Column('password_reset_token', sa.String(length=255), nullable=True, comment='Password reset token'),
    sa.Column('password_reset_expires', sa.DateTime(timezone=True), nullable=True, comment='Password reset token expiration'),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True, comment='Last login timestamp'),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), nullable=True, comment='Last activity timestamp'),
    sa.Column('login_count', sa.Integer(), nullable=False, comment='Total login count'),
    sa.Column('language', sa.String(length=10), nullable=False, comment='User interface language'),
    sa.Column('timezone', sa.String(length=50), nullable=False, comment='User timezone'),
    sa.Column('preferences', sa.Text(), nullable=True, comment='JSON user preferences'),
    sa.Column('is_super_admin', sa.Boolean(), nullable=False, comment='Super admin flag (platform owner)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_email_verification', 'users', ['email_verification_token'], unique=False)
    op.create_index('idx_user_last_activity', 'users', ['last_activity_at'], unique=False)
    op.create_index('idx_user_password_reset', 'users', ['password_reset_token'], unique=False)
    op.create_index('idx_user_super_admin', 'users', ['is_super_admin'], unique=False)
    op.create_index('idx_user_tenant_email', 'users', ['tenant_id', 'email'], unique=True)
    op.create_index('idx_user_tenant_role', 'users', ['tenant_id', 'role'], unique=False)
    op.create_index('idx_user_tenant_status', 'users', ['tenant_id', 'status'], unique=False)
    op.create_index(op.f('ix_users_tenant_id'), 'users', ['tenant_id'], unique=False)
    op.create_table('invoices',
    sa.Column('invoice_number', sa.String(length=50), nullable=False, comment='Unique invoice number within tenant'),
    sa.Column('customer_id', sa.UUID(), nullable=False, comment='Customer ID'),
    sa.Column('invoice_type', sa.Enum('GENERAL', 'GOLD', name='invoicetype'), nullable=False, comment='Type of invoice (general or gold)'),
    sa.Column('status', sa.Enum('DRAFT', 'SENT', 'PAID', 'PARTIALLY_PAID', 'OVERDUE', 'CANCELLED', name='invoicestatus'), nullable=False, comment='Current invoice status'),
    sa.Column('subtotal', sa.Numeric(precision=15, scale=2), nullable=False, comment='Invoice subtotal before tax'),
    sa.Column('tax_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Total tax amount'),
    sa.Column('discount_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Total discount amount'),
    sa.Column('total_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Final invoice total'),
    sa.Column('paid_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Amount already paid'),
    sa.Column('total_gold_weight', sa.Numeric(precision=10, scale=3), nullable=True, comment='Total gold weight for gold invoices (grams)'),
    sa.Column('gold_price_at_creation', sa.Numeric(precision=15, scale=2), nullable=True, comment='Gold price per gram at invoice creation'),
    sa.Column('is_installment', sa.Boolean(), nullable=False, comment='Whether this invoice has installment payments'),
    sa.Column('installment_type', sa.String(length=20), nullable=True, comment='Type of installment (general or gold)'),
    sa.Column('remaining_balance', sa.Numeric(precision=15, scale=2), nullable=True, comment='Remaining balance for general installments'),
    sa.Column('remaining_gold_weight', sa.Numeric(precision=10, scale=3), nullable=True, comment='Remaining gold weight for gold installments (مانده به گرم)'),
    sa.Column('invoice_date', sa.DateTime(timezone=True), nullable=False, comment='Invoice creation date'),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=True, comment='Invoice due date'),
    sa.Column('qr_code_token', sa.String(length=255), nullable=True, comment='Unique token for QR code sharing'),
    sa.Column('is_shareable', sa.Boolean(), nullable=False, comment='Whether invoice can be shared publicly'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes about invoice'),
    sa.Column('customer_notes', sa.Text(), nullable=True, comment='Notes visible to customer'),
    sa.Column('terms_and_conditions', sa.Text(), nullable=True, comment='Invoice terms and conditions'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('qr_code_token')
    )
    op.create_index('idx_invoice_due_date', 'invoices', ['due_date'], unique=False)
    op.create_index('idx_invoice_is_installment', 'invoices', ['is_installment'], unique=False)
    op.create_index('idx_invoice_qr_token', 'invoices', ['qr_code_token'], unique=False)
    op.create_index('idx_invoice_tenant_customer', 'invoices', ['tenant_id', 'customer_id'], unique=False)
    op.create_index('idx_invoice_tenant_date', 'invoices', ['tenant_id', 'invoice_date'], unique=False)
    op.create_index('idx_invoice_tenant_number', 'invoices', ['tenant_id', 'invoice_number'], unique=True)
    op.create_index('idx_invoice_tenant_status', 'invoices', ['tenant_id', 'status'], unique=False)
    op.create_index('idx_invoice_tenant_type', 'invoices', ['tenant_id', 'invoice_type'], unique=False)
    op.create_index(op.f('ix_invoices_tenant_id'), 'invoices', ['tenant_id'], unique=False)
    op.create_table('journal_entry_lines',
    sa.Column('journal_entry_id', sa.UUID(), nullable=False, comment='Journal entry ID'),
    sa.Column('account_id', sa.UUID(), nullable=False, comment='Account ID'),
    sa.Column('line_number', sa.Integer(), nullable=False, comment='Line sequence number'),
    sa.Column('description', sa.Text(), nullable=True, comment='Line description'),
    sa.Column('debit_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Debit amount'),
    sa.Column('credit_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Credit amount'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['journal_entry_id'], ['journal_entries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_journal_entry_line_account', 'journal_entry_lines', ['account_id'], unique=False)
    op.create_index('idx_journal_entry_line_entry', 'journal_entry_lines', ['journal_entry_id'], unique=False)
    op.create_table('notification_logs',
    sa.Column('notification_type', sa.Enum('EMAIL', 'SMS', 'PUSH', name='notificationtype'), nullable=False, comment='Type of notification'),
    sa.Column('status', sa.Enum('PENDING', 'SENT', 'DELIVERED', 'FAILED', 'CANCELLED', name='notificationstatus'), nullable=False, comment='Notification status'),
    sa.Column('recipient_email', sa.String(length=255), nullable=True, comment='Recipient email address'),
    sa.Column('recipient_phone', sa.String(length=50), nullable=True, comment='Recipient phone number'),
    sa.Column('customer_id', sa.UUID(), nullable=True, comment='Customer ID (if applicable)'),
    sa.Column('subject', sa.String(length=500), nullable=True, comment='Message subject'),
    sa.Column('body', sa.Text(), nullable=False, comment='Message body'),
    sa.Column('template_id', sa.UUID(), nullable=True, comment='Template used (if any)'),
    sa.Column('template_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Variables used in template'),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True, comment='Sent timestamp'),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True, comment='Delivered timestamp'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if failed'),
    sa.Column('retry_count', sa.Integer(), nullable=False, comment='Number of retry attempts'),
    sa.Column('reference_type', sa.String(length=50), nullable=True, comment='Type of related entity (invoice, payment, etc.)'),
    sa.Column('reference_id', sa.UUID(), nullable=True, comment='ID of related entity'),
    sa.Column('provider', sa.String(length=100), nullable=True, comment='Service provider used (SMTP, SMS gateway, etc.)'),
    sa.Column('provider_message_id', sa.String(length=255), nullable=True, comment="Provider's message ID"),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['template_id'], ['notification_templates.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_notification_log_customer', 'notification_logs', ['customer_id'], unique=False)
    op.create_index('idx_notification_log_reference', 'notification_logs', ['reference_type', 'reference_id'], unique=False)
    op.create_index('idx_notification_log_sent_at', 'notification_logs', ['sent_at'], unique=False)
    op.create_index('idx_notification_log_tenant_status', 'notification_logs', ['tenant_id', 'status'], unique=False)
    op.create_index('idx_notification_log_tenant_type', 'notification_logs', ['tenant_id', 'notification_type'], unique=False)
    op.create_index(op.f('ix_notification_logs_tenant_id'), 'notification_logs', ['tenant_id'], unique=False)
    op.create_table('payment_methods',
    sa.Column('name', sa.String(length=100), nullable=False, comment='Payment method name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Payment method description'),
    sa.Column('account_id', sa.UUID(), nullable=True, comment='Default account for this payment method'),
    sa.Column('is_cash', sa.Boolean(), nullable=False, comment='Whether this is a cash payment method'),
    sa.Column('requires_reference', sa.Boolean(), nullable=False, comment='Whether reference number is required'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_payment_method_tenant', 'payment_methods', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_payment_methods_tenant_id'), 'payment_methods', ['tenant_id'], unique=False)
    op.create_table('products',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Product name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Product description'),
    sa.Column('sku', sa.String(length=100), nullable=True, comment='Stock Keeping Unit (SKU)'),
    sa.Column('barcode', sa.String(length=100), nullable=True, comment='Product barcode'),
    sa.Column('category_id', sa.UUID(), nullable=True, comment='Product category ID'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Product tags for search and filtering'),
    sa.Column('cost_price', sa.Numeric(precision=15, scale=2), nullable=True, comment='Product cost price'),
    sa.Column('selling_price', sa.Numeric(precision=15, scale=2), nullable=False, comment='Product selling price'),
    sa.Column('min_price', sa.Numeric(precision=15, scale=2), nullable=True, comment='Minimum allowed selling price'),
    sa.Column('max_price', sa.Numeric(precision=15, scale=2), nullable=True, comment='Maximum allowed selling price'),
    sa.Column('is_gold_product', sa.Boolean(), nullable=False, comment='Whether this is a gold product'),
    sa.Column('gold_purity', sa.Numeric(precision=5, scale=3), nullable=True, comment='Gold purity (e.g., 18.000 for 18k)'),
    sa.Column('weight_per_unit', sa.Numeric(precision=10, scale=3), nullable=True, comment='Weight per unit in grams (for gold products)'),
    sa.Column('track_inventory', sa.Boolean(), nullable=False, comment='Whether to track inventory for this product'),
    sa.Column('stock_quantity', sa.Integer(), nullable=False, comment='Current stock quantity'),
    sa.Column('reserved_quantity', sa.Integer(), nullable=False, comment='Reserved stock quantity'),
    sa.Column('min_stock_level', sa.Integer(), nullable=False, comment='Minimum stock level for alerts'),
    sa.Column('max_stock_level', sa.Integer(), nullable=True, comment='Maximum stock level'),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'DISCONTINUED', name='productstatus'), nullable=False, comment='Product status'),
    sa.Column('is_service', sa.Boolean(), nullable=False, comment='Whether this is a service (no inventory tracking)'),
    sa.Column('images', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Product images URLs'),
    sa.Column('length', sa.Numeric(precision=10, scale=2), nullable=True, comment='Product length'),
    sa.Column('width', sa.Numeric(precision=10, scale=2), nullable=True, comment='Product width'),
    sa.Column('height', sa.Numeric(precision=10, scale=2), nullable=True, comment='Product height'),
    sa.Column('weight', sa.Numeric(precision=10, scale=3), nullable=True, comment='Product weight'),
    sa.Column('manufacturer', sa.String(length=255), nullable=True, comment='Product manufacturer'),
    sa.Column('brand', sa.String(length=255), nullable=True, comment='Product brand'),
    sa.Column('model', sa.String(length=255), nullable=True, comment='Product model'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes about product'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['category_id'], ['product_categories.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_product_is_gold', 'products', ['is_gold_product'], unique=False)
    op.create_index('idx_product_selling_price', 'products', ['selling_price'], unique=False)
    op.create_index('idx_product_stock_quantity', 'products', ['stock_quantity'], unique=False)
    op.create_index('idx_product_tenant_barcode', 'products', ['tenant_id', 'barcode'], unique=False)
    op.create_index('idx_product_tenant_category', 'products', ['tenant_id', 'category_id'], unique=False)
    op.create_index('idx_product_tenant_name', 'products', ['tenant_id', 'name'], unique=False)
    op.create_index('idx_product_tenant_sku', 'products', ['tenant_id', 'sku'], unique=False)
    op.create_index('idx_product_tenant_status', 'products', ['tenant_id', 'status'], unique=False)
    op.create_index(op.f('ix_products_tenant_id'), 'products', ['tenant_id'], unique=False)
    op.create_table('restore_logs',
    sa.Column('backup_log_id', sa.UUID(), nullable=False, comment='Source backup log ID'),
    sa.Column('tenant_id', sa.UUID(), nullable=True, comment='Target tenant ID'),
    sa.Column('status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELLED', name='backupstatus'), nullable=False, comment='Restore status'),
    sa.Column('initiated_by', sa.UUID(), nullable=False, comment='Admin user who initiated restore'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=False, comment='Restore start time'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='Restore completion time'),
    sa.Column('duration_seconds', sa.Integer(), nullable=True, comment='Restore duration in seconds'),
    sa.Column('restore_point', sa.DateTime(timezone=True), nullable=False, comment='Backup date being restored'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if restore failed'),
    sa.Column('pre_restore_snapshot', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Snapshot of data before restore'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.ForeignKeyConstraint(['backup_log_id'], ['backup_logs.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_restore_log_backup', 'restore_logs', ['backup_log_id'], unique=False)
    op.create_index('idx_restore_log_initiated_by', 'restore_logs', ['initiated_by'], unique=False)
    op.create_index('idx_restore_log_started_at', 'restore_logs', ['started_at'], unique=False)
    op.create_index('idx_restore_log_status', 'restore_logs', ['status'], unique=False)
    op.create_index('idx_restore_log_tenant', 'restore_logs', ['tenant_id'], unique=False)
    op.create_table('installments',
    sa.Column('invoice_id', sa.UUID(), nullable=False, comment='Invoice ID'),
    sa.Column('installment_number', sa.Integer(), nullable=False, comment='Installment sequence number'),
    sa.Column('installment_type', sa.Enum('GENERAL', 'GOLD', name='installmenttype'), nullable=False, comment='Type of installment (general or gold)'),
    sa.Column('status', sa.Enum('PENDING', 'PAID', 'OVERDUE', 'CANCELLED', name='installmentstatus'), nullable=False, comment='Current installment status'),
    sa.Column('amount_due', sa.Numeric(precision=15, scale=2), nullable=True, comment='Amount due for general installments'),
    sa.Column('amount_paid', sa.Numeric(precision=15, scale=2), nullable=True, comment='Amount already paid'),
    sa.Column('gold_weight_due', sa.Numeric(precision=10, scale=3), nullable=True, comment='Gold weight due in grams'),
    sa.Column('gold_weight_paid', sa.Numeric(precision=10, scale=3), nullable=True, comment='Gold weight already paid in grams'),
    sa.Column('gold_price_at_payment', sa.Numeric(precision=15, scale=2), nullable=True, comment='Gold price per gram at time of payment'),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=False, comment='Installment due date'),
    sa.Column('paid_at', sa.DateTime(timezone=True), nullable=True, comment='Payment timestamp'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Notes about this installment'),
    sa.Column('payment_method', sa.String(length=50), nullable=True, comment='Payment method used'),
    sa.Column('payment_reference', sa.String(length=255), nullable=True, comment='Payment reference number'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_installment_due_date', 'installments', ['due_date'], unique=False)
    op.create_index('idx_installment_invoice', 'installments', ['invoice_id'], unique=False)
    op.create_index('idx_installment_overdue', 'installments', ['due_date', 'status'], unique=False)
    op.create_index('idx_installment_status', 'installments', ['status'], unique=False)
    op.create_index('idx_installment_type', 'installments', ['installment_type'], unique=False)
    op.create_table('invoice_items',
    sa.Column('invoice_id', sa.UUID(), nullable=False, comment='Invoice ID'),
    sa.Column('product_id', sa.UUID(), nullable=True, comment='Product ID (optional for custom items)'),
    sa.Column('description', sa.String(length=500), nullable=False, comment='Item description'),
    sa.Column('quantity', sa.Numeric(precision=10, scale=3), nullable=False, comment='Item quantity'),
    sa.Column('unit_price', sa.Numeric(precision=15, scale=2), nullable=False, comment='Price per unit'),
    sa.Column('line_total', sa.Numeric(precision=15, scale=2), nullable=False, comment='Total for this line item'),
    sa.Column('tax_rate', sa.Numeric(precision=5, scale=2), nullable=False, comment='Tax rate percentage'),
    sa.Column('tax_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Tax amount for this item'),
    sa.Column('discount_rate', sa.Numeric(precision=5, scale=2), nullable=False, comment='Discount rate percentage'),
    sa.Column('discount_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Discount amount for this item'),
    sa.Column('weight', sa.Numeric(precision=10, scale=3), nullable=True, comment='Gold weight in grams (وزن)'),
    sa.Column('labor_fee', sa.Numeric(precision=15, scale=2), nullable=True, comment='Labor fee (اجرت)'),
    sa.Column('profit', sa.Numeric(precision=15, scale=2), nullable=True, comment='Profit amount (سود)'),
    sa.Column('vat_amount', sa.Numeric(precision=15, scale=2), nullable=True, comment='VAT amount (مالیات)'),
    sa.Column('gold_purity', sa.Numeric(precision=5, scale=3), nullable=True, comment='Gold purity (e.g., 18.000 for 18k)'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Notes about this item'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_invoice_item_invoice', 'invoice_items', ['invoice_id'], unique=False)
    op.create_index('idx_invoice_item_product', 'invoice_items', ['product_id'], unique=False)
    op.create_table('notification_queue',
    sa.Column('notification_log_id', sa.UUID(), nullable=False, comment='Notification log ID'),
    sa.Column('priority', sa.Integer(), nullable=False, comment='Queue priority (1=highest, 10=lowest)'),
    sa.Column('scheduled_at', sa.DateTime(timezone=True), nullable=False, comment='Scheduled send time'),
    sa.Column('attempts', sa.Integer(), nullable=False, comment='Number of processing attempts'),
    sa.Column('last_attempt_at', sa.DateTime(timezone=True), nullable=True, comment='Last processing attempt timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.ForeignKeyConstraint(['notification_log_id'], ['notification_logs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_notification_queue_attempts', 'notification_queue', ['attempts'], unique=False)
    op.create_index('idx_notification_queue_priority', 'notification_queue', ['priority'], unique=False)
    op.create_index('idx_notification_queue_scheduled', 'notification_queue', ['scheduled_at'], unique=False)
    op.create_table('transactions',
    sa.Column('transaction_number', sa.String(length=50), nullable=False, comment='Transaction number'),
    sa.Column('transaction_type', sa.Enum('SALE', 'PURCHASE', 'PAYMENT', 'RECEIPT', 'ADJUSTMENT', 'TRANSFER', name='transactiontype'), nullable=False, comment='Type of transaction'),
    sa.Column('transaction_date', sa.DateTime(timezone=True), nullable=False, comment='Transaction date'),
    sa.Column('customer_id', sa.UUID(), nullable=True, comment='Customer ID (for sales/receipts)'),
    sa.Column('amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Transaction amount'),
    sa.Column('payment_method_id', sa.UUID(), nullable=True, comment='Payment method used'),
    sa.Column('reference_number', sa.String(length=100), nullable=True, comment='Reference number (check, transfer, etc.)'),
    sa.Column('invoice_id', sa.UUID(), nullable=True, comment='Related invoice ID'),
    sa.Column('journal_entry_id', sa.UUID(), nullable=True, comment='Related journal entry ID'),
    sa.Column('description', sa.Text(), nullable=True, comment='Transaction description'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Internal notes'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),
    sa.ForeignKeyConstraint(['journal_entry_id'], ['journal_entries.id'], ),
    sa.ForeignKeyConstraint(['payment_method_id'], ['payment_methods.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_transaction_customer', 'transactions', ['customer_id'], unique=False)
    op.create_index('idx_transaction_invoice', 'transactions', ['invoice_id'], unique=False)
    op.create_index('idx_transaction_tenant_date', 'transactions', ['tenant_id', 'transaction_date'], unique=False)
    op.create_index('idx_transaction_tenant_number', 'transactions', ['tenant_id', 'transaction_number'], unique=True)
    op.create_index('idx_transaction_tenant_type', 'transactions', ['tenant_id', 'transaction_type'], unique=False)
    op.create_index(op.f('ix_transactions_tenant_id'), 'transactions', ['tenant_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_transactions_tenant_id'), table_name='transactions')
    op.drop_index('idx_transaction_tenant_type', table_name='transactions')
    op.drop_index('idx_transaction_tenant_number', table_name='transactions')
    op.drop_index('idx_transaction_tenant_date', table_name='transactions')
    op.drop_index('idx_transaction_invoice', table_name='transactions')
    op.drop_index('idx_transaction_customer', table_name='transactions')
    op.drop_table('transactions')
    op.drop_index('idx_notification_queue_scheduled', table_name='notification_queue')
    op.drop_index('idx_notification_queue_priority', table_name='notification_queue')
    op.drop_index('idx_notification_queue_attempts', table_name='notification_queue')
    op.drop_table('notification_queue')
    op.drop_index('idx_invoice_item_product', table_name='invoice_items')
    op.drop_index('idx_invoice_item_invoice', table_name='invoice_items')
    op.drop_table('invoice_items')
    op.drop_index('idx_installment_type', table_name='installments')
    op.drop_index('idx_installment_status', table_name='installments')
    op.drop_index('idx_installment_overdue', table_name='installments')
    op.drop_index('idx_installment_invoice', table_name='installments')
    op.drop_index('idx_installment_due_date', table_name='installments')
    op.drop_table('installments')
    op.drop_index('idx_restore_log_tenant', table_name='restore_logs')
    op.drop_index('idx_restore_log_status', table_name='restore_logs')
    op.drop_index('idx_restore_log_started_at', table_name='restore_logs')
    op.drop_index('idx_restore_log_initiated_by', table_name='restore_logs')
    op.drop_index('idx_restore_log_backup', table_name='restore_logs')
    op.drop_table('restore_logs')
    op.drop_index(op.f('ix_products_tenant_id'), table_name='products')
    op.drop_index('idx_product_tenant_status', table_name='products')
    op.drop_index('idx_product_tenant_sku', table_name='products')
    op.drop_index('idx_product_tenant_name', table_name='products')
    op.drop_index('idx_product_tenant_category', table_name='products')
    op.drop_index('idx_product_tenant_barcode', table_name='products')
    op.drop_index('idx_product_stock_quantity', table_name='products')
    op.drop_index('idx_product_selling_price', table_name='products')
    op.drop_index('idx_product_is_gold', table_name='products')
    op.drop_table('products')
    op.drop_index(op.f('ix_payment_methods_tenant_id'), table_name='payment_methods')
    op.drop_index('idx_payment_method_tenant', table_name='payment_methods')
    op.drop_table('payment_methods')
    op.drop_index(op.f('ix_notification_logs_tenant_id'), table_name='notification_logs')
    op.drop_index('idx_notification_log_tenant_type', table_name='notification_logs')
    op.drop_index('idx_notification_log_tenant_status', table_name='notification_logs')
    op.drop_index('idx_notification_log_sent_at', table_name='notification_logs')
    op.drop_index('idx_notification_log_reference', table_name='notification_logs')
    op.drop_index('idx_notification_log_customer', table_name='notification_logs')
    op.drop_table('notification_logs')
    op.drop_index('idx_journal_entry_line_entry', table_name='journal_entry_lines')
    op.drop_index('idx_journal_entry_line_account', table_name='journal_entry_lines')
    op.drop_table('journal_entry_lines')
    op.drop_index(op.f('ix_invoices_tenant_id'), table_name='invoices')
    op.drop_index('idx_invoice_tenant_type', table_name='invoices')
    op.drop_index('idx_invoice_tenant_status', table_name='invoices')
    op.drop_index('idx_invoice_tenant_number', table_name='invoices')
    op.drop_index('idx_invoice_tenant_date', table_name='invoices')
    op.drop_index('idx_invoice_tenant_customer', table_name='invoices')
    op.drop_index('idx_invoice_qr_token', table_name='invoices')
    op.drop_index('idx_invoice_is_installment', table_name='invoices')
    op.drop_index('idx_invoice_due_date', table_name='invoices')
    op.drop_table('invoices')
    op.drop_index(op.f('ix_users_tenant_id'), table_name='users')
    op.drop_index('idx_user_tenant_status', table_name='users')
    op.drop_index('idx_user_tenant_role', table_name='users')
    op.drop_index('idx_user_tenant_email', table_name='users')
    op.drop_index('idx_user_super_admin', table_name='users')
    op.drop_index('idx_user_password_reset', table_name='users')
    op.drop_index('idx_user_last_activity', table_name='users')
    op.drop_index('idx_user_email_verification', table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_product_categories_tenant_id'), table_name='product_categories')
    op.drop_index('idx_category_tenant_name', table_name='product_categories')
    op.drop_index('idx_category_parent', table_name='product_categories')
    op.drop_table('product_categories')
    op.drop_index(op.f('ix_notification_templates_tenant_id'), table_name='notification_templates')
    op.drop_index('idx_notification_template_trigger', table_name='notification_templates')
    op.drop_index('idx_notification_template_tenant_type', table_name='notification_templates')
    op.drop_index('idx_notification_template_default', table_name='notification_templates')
    op.drop_table('notification_templates')
    op.drop_index(op.f('ix_journal_entries_tenant_id'), table_name='journal_entries')
    op.drop_index('idx_journal_entry_tenant_number', table_name='journal_entries')
    op.drop_index('idx_journal_entry_tenant_date', table_name='journal_entries')
    op.drop_index('idx_journal_entry_reference', table_name='journal_entries')
    op.drop_index('idx_journal_entry_posted', table_name='journal_entries')
    op.drop_table('journal_entries')
    op.drop_index(op.f('ix_gold_prices_tenant_id'), table_name='gold_prices')
    op.drop_index('idx_gold_price_tenant_purity', table_name='gold_prices')
    op.drop_index('idx_gold_price_tenant_date', table_name='gold_prices')
    op.drop_index('idx_gold_price_tenant_current', table_name='gold_prices')
    op.drop_index('idx_gold_price_tenant_active', table_name='gold_prices')
    op.drop_index('idx_gold_price_source', table_name='gold_prices')
    op.drop_table('gold_prices')
    op.drop_index(op.f('ix_gold_price_history_tenant_id'), table_name='gold_price_history')
    op.drop_index('idx_gold_price_history_tenant_purity', table_name='gold_price_history')
    op.drop_index('idx_gold_price_history_tenant_date', table_name='gold_price_history')
    op.drop_index('idx_gold_price_history_date_purity', table_name='gold_price_history')
    op.drop_table('gold_price_history')
    op.drop_index(op.f('ix_customers_tenant_id'), table_name='customers')
    op.drop_index('idx_customer_total_gold_debt', table_name='customers')
    op.drop_index('idx_customer_total_debt', table_name='customers')
    op.drop_index('idx_customer_tenant_type', table_name='customers')
    op.drop_index('idx_customer_tenant_status', table_name='customers')
    op.drop_index('idx_customer_tenant_phone', table_name='customers')
    op.drop_index('idx_customer_tenant_name', table_name='customers')
    op.drop_index('idx_customer_tenant_email', table_name='customers')
    op.drop_index('idx_customer_last_purchase', table_name='customers')
    op.drop_table('customers')
    op.drop_index('idx_backup_log_type', table_name='backup_logs')
    op.drop_index('idx_backup_log_tenant', table_name='backup_logs')
    op.drop_index('idx_backup_log_status', table_name='backup_logs')
    op.drop_index('idx_backup_log_started_at', table_name='backup_logs')
    op.drop_index('idx_backup_log_completed_at', table_name='backup_logs')
    op.drop_table('backup_logs')
    op.drop_index(op.f('ix_accounts_tenant_id'), table_name='accounts')
    op.drop_index('idx_account_tenant_type', table_name='accounts')
    op.drop_index('idx_account_tenant_code', table_name='accounts')
    op.drop_index('idx_account_parent', table_name='accounts')
    op.drop_table('accounts')
    op.drop_index('idx_tenant_subscription_type', table_name='tenants')
    op.drop_index('idx_tenant_subscription_expires', table_name='tenants')
    op.drop_index('idx_tenant_status', table_name='tenants')
    op.drop_index('idx_tenant_last_activity', table_name='tenants')
    op.drop_index('idx_tenant_email', table_name='tenants')
    op.drop_index('idx_tenant_domain', table_name='tenants')
    op.drop_table('tenants')
    op.drop_index('idx_storage_location_provider', table_name='storage_locations')
    op.drop_index('idx_storage_location_primary', table_name='storage_locations')
    op.drop_index('idx_storage_location_active', table_name='storage_locations')
    op.drop_table('storage_locations')
    op.drop_index('idx_installment_plan_type', table_name='installment_plans')
    op.drop_index('idx_installment_plan_active', table_name='installment_plans')
    op.drop_table('installment_plans')
    # ### end Alembic commands ###