"""add_enhanced_database_schema_models

Revision ID: a74a8910d718
Revises: 4eff1025411c
Create Date: 2025-09-10 20:34:57.434202

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a74a8910d718'
down_revision = '4eff1025411c'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_activity_log_ip', table_name='activity_logs')
    op.drop_index('idx_activity_log_status', table_name='activity_logs')
    op.drop_index('idx_activity_log_tenant_action', table_name='activity_logs')
    op.drop_index('idx_activity_log_tenant_date', table_name='activity_logs')
    op.drop_index('idx_activity_log_tenant_resource', table_name='activity_logs')
    op.drop_index('idx_activity_log_tenant_user', table_name='activity_logs')
    op.drop_index('ix_activity_logs_action', table_name='activity_logs')
    op.drop_index('ix_activity_logs_resource_id', table_name='activity_logs')
    op.drop_index('ix_activity_logs_resource_type', table_name='activity_logs')
    op.drop_index('ix_activity_logs_tenant_id', table_name='activity_logs')
    op.drop_index('ix_activity_logs_user_id', table_name='activity_logs')
    op.drop_table('activity_logs')
    op.add_column('error_logs', sa.Column('request_url', sa.String(length=500), nullable=True, comment='URL where error occurred'))
    op.add_column('error_logs', sa.Column('request_method', sa.String(length=10), nullable=True, comment='HTTP method (GET, POST, etc.)'))
    op.add_column('error_logs', sa.Column('client_ip', sa.String(length=45), nullable=True, comment='Client IP address'))
    # Add environment column as nullable first, then update existing records, then make it non-nullable
    op.add_column('error_logs', sa.Column('environment', sa.String(length=20), nullable=True, comment='Environment where error occurred'))
    # Update existing records to have default environment value
    op.execute("UPDATE error_logs SET environment = 'production' WHERE environment IS NULL")
    # Now make the column non-nullable
    op.alter_column('error_logs', 'environment', nullable=False)
    op.add_column('error_logs', sa.Column('acknowledged_at', sa.DateTime(timezone=True), nullable=True, comment='When the error was acknowledged'))
    op.alter_column('error_logs', 'tenant_id',
               existing_type=sa.UUID(),
               comment='Reference to tenant (null for system-wide errors)',
               existing_comment='Tenant ID for tenant-specific errors',
               existing_nullable=True)
    op.alter_column('error_logs', 'user_id',
               existing_type=sa.UUID(),
               comment='User who encountered the error (if applicable)',
               existing_comment='User ID if error is user-specific',
               existing_nullable=True)
    op.alter_column('error_logs', 'resolved_by_admin_id',
               existing_type=sa.UUID(),
               comment='Super admin who resolved the error',
               existing_comment='Admin user who resolved the error',
               existing_nullable=True)
    op.alter_column('error_logs', 'error_type',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               comment='Type/class of error',
               existing_comment='Error type/class name',
               existing_nullable=False)
    op.alter_column('error_logs', 'error_message',
               existing_type=sa.TEXT(),
               comment='Error message or description',
               existing_comment='Error message',
               existing_nullable=False)
    op.alter_column('error_logs', 'stack_trace',
               existing_type=sa.TEXT(),
               comment='Full stack trace of the error',
               existing_comment='Full stack trace',
               existing_nullable=True)
    op.alter_column('error_logs', 'category',
               existing_type=postgresql.ENUM('AUTHENTICATION', 'AUTHORIZATION', 'VALIDATION', 'DATABASE', 'EXTERNAL_API', 'BUSINESS_LOGIC', 'SYSTEM', 'NETWORK', 'PERFORMANCE', 'SECURITY', 'UNKNOWN', name='errorcategory'),
               comment='Error category for organization',
               existing_comment='Error category for classification',
               existing_nullable=False)
    op.alter_column('error_logs', 'context_data',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=sa.Text(),
               comment='JSON context data (request params, etc.)',
               existing_comment='Additional error context data',
               existing_nullable=True)
    op.alter_column('error_logs', 'resolution_notes',
               existing_type=sa.TEXT(),
               comment='Admin notes about error resolution',
               existing_comment='Resolution notes and actions taken',
               existing_nullable=True)
    op.alter_column('error_logs', 'resolved_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='When the error was resolved',
               existing_comment='Resolution timestamp',
               existing_nullable=True)
    op.alter_column('error_logs', 'first_occurred_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='When this error first occurred',
               existing_comment='First occurrence timestamp',
               existing_nullable=False)
    op.alter_column('error_logs', 'last_occurred_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='When this error last occurred',
               existing_comment='Last occurrence timestamp',
               existing_nullable=False)
    op.alter_column('error_logs', 'occurrence_count',
               existing_type=sa.INTEGER(),
               comment='Number of times this error has occurred',
               existing_comment='Number of times this error occurred',
               existing_nullable=False)
    op.drop_index('idx_error_log_duplicate_detection', table_name='error_logs')
    op.drop_index('idx_error_log_endpoint_status', table_name='error_logs')
    op.drop_index('idx_error_log_first_occurred', table_name='error_logs')
    op.drop_index('idx_error_log_notification', table_name='error_logs')
    op.drop_index('idx_error_log_occurrence_count', table_name='error_logs')
    op.drop_index('idx_error_log_resolved_by', table_name='error_logs')
    op.drop_index('idx_error_log_status_occurred', table_name='error_logs')
    op.drop_index('idx_error_log_tenant_severity', table_name='error_logs')
    op.drop_index('ix_error_logs_endpoint', table_name='error_logs')
    op.drop_index('ix_error_logs_ip_address', table_name='error_logs')
    op.drop_index('ix_error_logs_request_id', table_name='error_logs')
    op.drop_index('ix_error_logs_session_id', table_name='error_logs')
    op.drop_index('ix_error_logs_status_code', table_name='error_logs')
    op.create_index('idx_error_log_code', 'error_logs', ['error_code'], unique=False)
    op.create_index('idx_error_log_environment', 'error_logs', ['environment'], unique=False)
    op.create_index('idx_error_log_occurred', 'error_logs', ['last_occurred_at'], unique=False)
    op.create_index('idx_error_log_resolved', 'error_logs', ['resolved_at'], unique=False)
    op.create_index(op.f('ix_error_logs_resolved_by_admin_id'), 'error_logs', ['resolved_by_admin_id'], unique=False)
    # Clean up orphaned records before adding foreign key constraints
    op.execute("UPDATE error_logs SET user_id = NULL WHERE user_id IS NOT NULL AND user_id NOT IN (SELECT id FROM users)")
    op.execute("UPDATE error_logs SET resolved_by_admin_id = NULL WHERE resolved_by_admin_id IS NOT NULL AND resolved_by_admin_id NOT IN (SELECT id FROM users)")
    op.execute("UPDATE error_logs SET tenant_id = NULL WHERE tenant_id IS NOT NULL AND tenant_id NOT IN (SELECT id FROM tenants)")
    
    # Now add the foreign key constraints
    op.create_foreign_key(None, 'error_logs', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'error_logs', 'users', ['resolved_by_admin_id'], ['id'])
    op.create_foreign_key(None, 'error_logs', 'tenants', ['tenant_id'], ['id'])
    op.drop_column('error_logs', 'session_id')
    op.drop_column('error_logs', 'endpoint')
    op.drop_column('error_logs', 'ip_address')
    op.drop_column('error_logs', 'notification_sent')
    op.drop_column('error_logs', 'status_code')
    op.drop_column('error_logs', 'memory_usage_mb')
    op.drop_column('error_logs', 'response_data')
    op.drop_column('error_logs', 'request_id')
    op.drop_column('error_logs', 'method')
    op.drop_column('error_logs', 'notification_sent_at')
    op.drop_column('error_logs', 'response_time_ms')
    op.drop_column('error_logs', 'request_data')
    op.add_column('subscription_history', sa.Column('change_type', sa.Enum('UPGRADE', 'DOWNGRADE', 'EXTENSION', 'ACTIVATION', 'DEACTIVATION', 'SUSPENSION', 'PLAN_SWITCH', 'MANUAL_EDIT', 'EXPIRATION', name='subscriptionchangetype'), nullable=False, comment='Type of subscription change'))
    op.add_column('subscription_history', sa.Column('old_expiration_date', sa.DateTime(timezone=True), nullable=True, comment='Previous expiration date'))
    op.add_column('subscription_history', sa.Column('new_expiration_date', sa.DateTime(timezone=True), nullable=True, comment='New expiration date'))
    op.add_column('subscription_history', sa.Column('old_max_users', sa.Integer(), nullable=True, comment='Previous user limit'))
    op.add_column('subscription_history', sa.Column('new_max_users', sa.Integer(), nullable=True, comment='New user limit'))
    op.add_column('subscription_history', sa.Column('old_max_products', sa.Integer(), nullable=True, comment='Previous product limit'))
    op.add_column('subscription_history', sa.Column('new_max_products', sa.Integer(), nullable=True, comment='New product limit'))
    op.add_column('subscription_history', sa.Column('change_reason', sa.Text(), nullable=True, comment='Reason for subscription change'))
    op.add_column('subscription_history', sa.Column('admin_notes', sa.Text(), nullable=True, comment='Admin notes about the change'))
    op.add_column('subscription_history', sa.Column('client_ip', sa.String(length=45), nullable=True, comment='IP address of admin making change'))
    op.add_column('subscription_history', sa.Column('is_system_change', sa.Boolean(), nullable=False, comment='Whether this was an automated system change'))
    op.add_column('subscription_history', sa.Column('effective_date', sa.DateTime(timezone=True), nullable=False, comment='When the change became effective'))
    op.alter_column('subscription_history', 'tenant_id',
               existing_type=sa.UUID(),
               comment='Reference to tenant',
               existing_comment='Tenant ID',
               existing_nullable=False)
    op.alter_column('subscription_history', 'admin_id',
               existing_type=sa.UUID(),
               comment='Super admin who made the change (null for system changes)',
               existing_comment='Admin user who made the change',
               existing_nullable=True)
    op.alter_column('subscription_history', 'new_subscription_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='New subscription type')
    op.alter_column('subscription_history', 'duration_months',
               existing_type=sa.INTEGER(),
               comment='Duration in months for extensions',
               existing_comment='Duration in months (for extensions/renewals)',
               existing_nullable=True)
    op.drop_index('idx_subscription_history_action', table_name='subscription_history')
    op.drop_index('idx_subscription_history_admin_id', table_name='subscription_history')
    op.drop_index('idx_subscription_history_change_date', table_name='subscription_history')
    op.drop_index('idx_subscription_history_tenant_date', table_name='subscription_history')
    op.drop_index('idx_subscription_history_tenant_id', table_name='subscription_history')
    op.create_index('idx_subscription_history_admin', 'subscription_history', ['admin_id', 'created_at'], unique=False)
    op.create_index('idx_subscription_history_effective', 'subscription_history', ['effective_date'], unique=False)
    op.create_index('idx_subscription_history_system', 'subscription_history', ['is_system_change'], unique=False)
    op.create_index('idx_subscription_history_tenant', 'subscription_history', ['tenant_id', 'created_at'], unique=False)
    op.create_index('idx_subscription_history_type', 'subscription_history', ['change_type'], unique=False)
    op.create_index(op.f('ix_subscription_history_admin_id'), 'subscription_history', ['admin_id'], unique=False)
    op.create_index(op.f('ix_subscription_history_tenant_id'), 'subscription_history', ['tenant_id'], unique=False)
    op.drop_constraint('fk_subscription_history_admin_id', 'subscription_history', type_='foreignkey')
    op.drop_constraint('fk_subscription_history_tenant_id', 'subscription_history', type_='foreignkey')
    op.create_foreign_key(None, 'subscription_history', 'tenants', ['tenant_id'], ['id'])
    op.create_foreign_key(None, 'subscription_history', 'users', ['admin_id'], ['id'])
    op.drop_column('subscription_history', 'change_date')
    op.drop_column('subscription_history', 'ip_address')
    op.drop_column('subscription_history', 'action')
    op.drop_column('subscription_history', 'new_expiry_date')
    op.drop_column('subscription_history', 'reason')
    op.drop_column('subscription_history', 'notes')
    op.drop_column('subscription_history', 'old_expiry_date')
    op.add_column('tenant_credentials', sa.Column('old_email', sa.String(length=255), nullable=True, comment='Previous email address'))
    op.add_column('tenant_credentials', sa.Column('new_email', sa.String(length=255), nullable=True, comment='New email address'))
    op.add_column('tenant_credentials', sa.Column('password_changed', sa.Boolean(), nullable=False, comment='Whether password was changed in this update'))
    op.add_column('tenant_credentials', sa.Column('change_reason', sa.Text(), nullable=True, comment='Reason for credential change'))
    op.add_column('tenant_credentials', sa.Column('change_type', sa.String(length=50), nullable=False, comment='Type of change: email, password, both'))
    op.add_column('tenant_credentials', sa.Column('client_ip', sa.String(length=45), nullable=True, comment='IP address of admin making change'))
    op.add_column('tenant_credentials', sa.Column('user_agent', sa.Text(), nullable=True, comment='User agent of admin making change'))
    op.alter_column('tenant_credentials', 'tenant_id',
               existing_type=sa.UUID(),
               comment='Reference to tenant',
               existing_comment='Tenant ID',
               existing_nullable=False)
    op.alter_column('tenant_credentials', 'user_id',
               existing_type=sa.UUID(),
               comment='Reference to tenant owner user',
               existing_comment='Tenant owner user ID',
               existing_nullable=False)
    op.alter_column('tenant_credentials', 'changed_by_admin_id',
               existing_type=sa.UUID(),
               nullable=False,
               comment='Super admin who made the change',
               existing_comment='Admin user who changed the password (null if changed by owner)')
    op.drop_index('idx_tenant_credentials_changed_at', table_name='tenant_credentials')
    op.drop_index('idx_tenant_credentials_locked', table_name='tenant_credentials')
    op.drop_index('idx_tenant_credentials_tenant_id', table_name='tenant_credentials')
    op.drop_index('idx_tenant_credentials_user_id', table_name='tenant_credentials')
    op.drop_index('idx_tenant_credentials_username', table_name='tenant_credentials')
    op.drop_constraint('tenant_credentials_tenant_id_key', 'tenant_credentials', type_='unique')
    op.drop_index('idx_tenant_credentials_admin', table_name='tenant_credentials')
    op.create_index('idx_tenant_credentials_admin', 'tenant_credentials', ['changed_by_admin_id', 'created_at'], unique=False)
    op.create_index('idx_tenant_credentials_tenant', 'tenant_credentials', ['tenant_id', 'created_at'], unique=False)
    op.create_index('idx_tenant_credentials_type', 'tenant_credentials', ['change_type'], unique=False)
    op.create_index('idx_tenant_credentials_user', 'tenant_credentials', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_tenant_credentials_changed_by_admin_id'), 'tenant_credentials', ['changed_by_admin_id'], unique=False)
    op.create_index(op.f('ix_tenant_credentials_tenant_id'), 'tenant_credentials', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_tenant_credentials_user_id'), 'tenant_credentials', ['user_id'], unique=False)
    op.drop_constraint('tenant_credentials_user_id_fkey', 'tenant_credentials', type_='foreignkey')
    op.drop_constraint('tenant_credentials_tenant_id_fkey', 'tenant_credentials', type_='foreignkey')
    op.drop_constraint('tenant_credentials_changed_by_admin_id_fkey', 'tenant_credentials', type_='foreignkey')
    op.create_foreign_key(None, 'tenant_credentials', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'tenant_credentials', 'tenants', ['tenant_id'], ['id'])
    op.create_foreign_key(None, 'tenant_credentials', 'users', ['changed_by_admin_id'], ['id'])
    op.drop_column('tenant_credentials', 'last_login_attempt')
    op.drop_column('tenant_credentials', 'failed_login_attempts')
    op.drop_column('tenant_credentials', 'change_history')
    op.drop_column('tenant_credentials', 'previous_password_hash')
    op.drop_column('tenant_credentials', 'password_change_count')
    op.drop_column('tenant_credentials', 'password_hash')
    op.drop_column('tenant_credentials', 'admin_notes')
    op.drop_column('tenant_credentials', 'account_locked_until')
    op.drop_column('tenant_credentials', 'username')
    op.drop_column('tenant_credentials', 'password_changed_at')
    op.drop_column('users', 'password_changed_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('password_changed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('tenant_credentials', sa.Column('password_changed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False, comment='When password was last changed'))
    op.add_column('tenant_credentials', sa.Column('username', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Current username/email for tenant owner'))
    op.add_column('tenant_credentials', sa.Column('account_locked_until', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Account lock expiration time'))
    op.add_column('tenant_credentials', sa.Column('admin_notes', sa.TEXT(), autoincrement=False, nullable=True, comment='Admin notes about credential changes'))
    op.add_column('tenant_credentials', sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Current password hash'))
    op.add_column('tenant_credentials', sa.Column('password_change_count', sa.INTEGER(), autoincrement=False, nullable=False, comment='Total number of password changes'))
    op.add_column('tenant_credentials', sa.Column('previous_password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Previous password hash (for preventing reuse)'))
    op.add_column('tenant_credentials', sa.Column('change_history', sa.TEXT(), autoincrement=False, nullable=True, comment='JSON array of password change history'))
    op.add_column('tenant_credentials', sa.Column('failed_login_attempts', sa.INTEGER(), autoincrement=False, nullable=False, comment='Number of consecutive failed login attempts'))
    op.add_column('tenant_credentials', sa.Column('last_login_attempt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Last login attempt timestamp'))
    op.drop_constraint(None, 'tenant_credentials', type_='foreignkey')
    op.drop_constraint(None, 'tenant_credentials', type_='foreignkey')
    op.drop_constraint(None, 'tenant_credentials', type_='foreignkey')
    op.create_foreign_key('tenant_credentials_changed_by_admin_id_fkey', 'tenant_credentials', 'users', ['changed_by_admin_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key('tenant_credentials_tenant_id_fkey', 'tenant_credentials', 'tenants', ['tenant_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('tenant_credentials_user_id_fkey', 'tenant_credentials', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_tenant_credentials_user_id'), table_name='tenant_credentials')
    op.drop_index(op.f('ix_tenant_credentials_tenant_id'), table_name='tenant_credentials')
    op.drop_index(op.f('ix_tenant_credentials_changed_by_admin_id'), table_name='tenant_credentials')
    op.drop_index('idx_tenant_credentials_user', table_name='tenant_credentials')
    op.drop_index('idx_tenant_credentials_type', table_name='tenant_credentials')
    op.drop_index('idx_tenant_credentials_tenant', table_name='tenant_credentials')
    op.drop_index('idx_tenant_credentials_admin', table_name='tenant_credentials')
    op.create_index('idx_tenant_credentials_admin', 'tenant_credentials', ['changed_by_admin_id'], unique=False)
    op.create_unique_constraint('tenant_credentials_tenant_id_key', 'tenant_credentials', ['tenant_id'])
    op.create_index('idx_tenant_credentials_username', 'tenant_credentials', ['username'], unique=False)
    op.create_index('idx_tenant_credentials_user_id', 'tenant_credentials', ['user_id'], unique=False)
    op.create_index('idx_tenant_credentials_tenant_id', 'tenant_credentials', ['tenant_id'], unique=False)
    op.create_index('idx_tenant_credentials_locked', 'tenant_credentials', ['account_locked_until'], unique=False)
    op.create_index('idx_tenant_credentials_changed_at', 'tenant_credentials', ['password_changed_at'], unique=False)
    op.alter_column('tenant_credentials', 'changed_by_admin_id',
               existing_type=sa.UUID(),
               nullable=True,
               comment='Admin user who changed the password (null if changed by owner)',
               existing_comment='Super admin who made the change')
    op.alter_column('tenant_credentials', 'user_id',
               existing_type=sa.UUID(),
               comment='Tenant owner user ID',
               existing_comment='Reference to tenant owner user',
               existing_nullable=False)
    op.alter_column('tenant_credentials', 'tenant_id',
               existing_type=sa.UUID(),
               comment='Tenant ID',
               existing_comment='Reference to tenant',
               existing_nullable=False)
    op.drop_column('tenant_credentials', 'user_agent')
    op.drop_column('tenant_credentials', 'client_ip')
    op.drop_column('tenant_credentials', 'change_type')
    op.drop_column('tenant_credentials', 'change_reason')
    op.drop_column('tenant_credentials', 'password_changed')
    op.drop_column('tenant_credentials', 'new_email')
    op.drop_column('tenant_credentials', 'old_email')
    op.add_column('subscription_history', sa.Column('old_expiry_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Previous expiry date'))
    op.add_column('subscription_history', sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True, comment='Additional notes about the change'))
    op.add_column('subscription_history', sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True, comment='Reason for the change'))
    op.add_column('subscription_history', sa.Column('new_expiry_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='New expiry date'))
    op.add_column('subscription_history', sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Type of subscription action'))
    op.add_column('subscription_history', sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True, comment='IP address of admin making change'))
    op.add_column('subscription_history', sa.Column('change_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='When the change was made'))
    op.drop_constraint(None, 'subscription_history', type_='foreignkey')
    op.drop_constraint(None, 'subscription_history', type_='foreignkey')
    op.create_foreign_key('fk_subscription_history_tenant_id', 'subscription_history', 'tenants', ['tenant_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('fk_subscription_history_admin_id', 'subscription_history', 'users', ['admin_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_subscription_history_tenant_id'), table_name='subscription_history')
    op.drop_index(op.f('ix_subscription_history_admin_id'), table_name='subscription_history')
    op.drop_index('idx_subscription_history_type', table_name='subscription_history')
    op.drop_index('idx_subscription_history_tenant', table_name='subscription_history')
    op.drop_index('idx_subscription_history_system', table_name='subscription_history')
    op.drop_index('idx_subscription_history_effective', table_name='subscription_history')
    op.drop_index('idx_subscription_history_admin', table_name='subscription_history')
    op.create_index('idx_subscription_history_tenant_id', 'subscription_history', ['tenant_id'], unique=False)
    op.create_index('idx_subscription_history_tenant_date', 'subscription_history', ['tenant_id', 'change_date'], unique=False)
    op.create_index('idx_subscription_history_change_date', 'subscription_history', ['change_date'], unique=False)
    op.create_index('idx_subscription_history_admin_id', 'subscription_history', ['admin_id'], unique=False)
    op.create_index('idx_subscription_history_action', 'subscription_history', ['action'], unique=False)
    op.alter_column('subscription_history', 'duration_months',
               existing_type=sa.INTEGER(),
               comment='Duration in months (for extensions/renewals)',
               existing_comment='Duration in months for extensions',
               existing_nullable=True)
    op.alter_column('subscription_history', 'new_subscription_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_comment='New subscription type')
    op.alter_column('subscription_history', 'admin_id',
               existing_type=sa.UUID(),
               comment='Admin user who made the change',
               existing_comment='Super admin who made the change (null for system changes)',
               existing_nullable=True)
    op.alter_column('subscription_history', 'tenant_id',
               existing_type=sa.UUID(),
               comment='Tenant ID',
               existing_comment='Reference to tenant',
               existing_nullable=False)
    op.drop_column('subscription_history', 'effective_date')
    op.drop_column('subscription_history', 'is_system_change')
    op.drop_column('subscription_history', 'client_ip')
    op.drop_column('subscription_history', 'admin_notes')
    op.drop_column('subscription_history', 'change_reason')
    op.drop_column('subscription_history', 'new_max_products')
    op.drop_column('subscription_history', 'old_max_products')
    op.drop_column('subscription_history', 'new_max_users')
    op.drop_column('subscription_history', 'old_max_users')
    op.drop_column('subscription_history', 'new_expiration_date')
    op.drop_column('subscription_history', 'old_expiration_date')
    op.drop_column('subscription_history', 'change_type')
    op.add_column('error_logs', sa.Column('request_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Sanitized request data'))
    op.add_column('error_logs', sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True, comment='Response time in milliseconds'))
    op.add_column('error_logs', sa.Column('notification_sent_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Notification timestamp'))
    op.add_column('error_logs', sa.Column('method', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='HTTP method'))
    op.add_column('error_logs', sa.Column('request_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Request tracking ID'))
    op.add_column('error_logs', sa.Column('response_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Sanitized response data'))
    op.add_column('error_logs', sa.Column('memory_usage_mb', sa.INTEGER(), autoincrement=False, nullable=True, comment='Memory usage in MB at time of error'))
    op.add_column('error_logs', sa.Column('status_code', sa.INTEGER(), autoincrement=False, nullable=True, comment='HTTP status code'))
    op.add_column('error_logs', sa.Column('notification_sent', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Whether notification was sent'))
    op.add_column('error_logs', sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True, comment='Client IP address'))
    op.add_column('error_logs', sa.Column('endpoint', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='API endpoint where error occurred'))
    op.add_column('error_logs', sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='User session ID'))
    op.drop_constraint(None, 'error_logs', type_='foreignkey')
    op.drop_constraint(None, 'error_logs', type_='foreignkey')
    op.drop_constraint(None, 'error_logs', type_='foreignkey')
    op.drop_index(op.f('ix_error_logs_resolved_by_admin_id'), table_name='error_logs')
    op.drop_index('idx_error_log_resolved', table_name='error_logs')
    op.drop_index('idx_error_log_occurred', table_name='error_logs')
    op.drop_index('idx_error_log_environment', table_name='error_logs')
    op.drop_index('idx_error_log_code', table_name='error_logs')
    op.create_index('ix_error_logs_status_code', 'error_logs', ['status_code'], unique=False)
    op.create_index('ix_error_logs_session_id', 'error_logs', ['session_id'], unique=False)
    op.create_index('ix_error_logs_request_id', 'error_logs', ['request_id'], unique=False)
    op.create_index('ix_error_logs_ip_address', 'error_logs', ['ip_address'], unique=False)
    op.create_index('ix_error_logs_endpoint', 'error_logs', ['endpoint'], unique=False)
    op.create_index('idx_error_log_tenant_severity', 'error_logs', ['tenant_id', 'severity'], unique=False)
    op.create_index('idx_error_log_status_occurred', 'error_logs', ['status', 'last_occurred_at'], unique=False)
    op.create_index('idx_error_log_resolved_by', 'error_logs', ['resolved_by_admin_id'], unique=False)
    op.create_index('idx_error_log_occurrence_count', 'error_logs', ['occurrence_count'], unique=False)
    op.create_index('idx_error_log_notification', 'error_logs', ['notification_sent', 'severity'], unique=False)
    op.create_index('idx_error_log_first_occurred', 'error_logs', ['first_occurred_at'], unique=False)
    op.create_index('idx_error_log_endpoint_status', 'error_logs', ['endpoint', 'status'], unique=False)
    op.create_index('idx_error_log_duplicate_detection', 'error_logs', ['error_type', 'error_message', 'tenant_id', 'status', 'last_occurred_at'], unique=False)
    op.alter_column('error_logs', 'occurrence_count',
               existing_type=sa.INTEGER(),
               comment='Number of times this error occurred',
               existing_comment='Number of times this error has occurred',
               existing_nullable=False)
    op.alter_column('error_logs', 'last_occurred_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Last occurrence timestamp',
               existing_comment='When this error last occurred',
               existing_nullable=False)
    op.alter_column('error_logs', 'first_occurred_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='First occurrence timestamp',
               existing_comment='When this error first occurred',
               existing_nullable=False)
    op.alter_column('error_logs', 'resolved_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Resolution timestamp',
               existing_comment='When the error was resolved',
               existing_nullable=True)
    op.alter_column('error_logs', 'resolution_notes',
               existing_type=sa.TEXT(),
               comment='Resolution notes and actions taken',
               existing_comment='Admin notes about error resolution',
               existing_nullable=True)
    op.alter_column('error_logs', 'context_data',
               existing_type=sa.Text(),
               type_=postgresql.JSON(astext_type=sa.Text()),
               comment='Additional error context data',
               existing_comment='JSON context data (request params, etc.)',
               existing_nullable=True)
    op.alter_column('error_logs', 'category',
               existing_type=postgresql.ENUM('AUTHENTICATION', 'AUTHORIZATION', 'VALIDATION', 'DATABASE', 'EXTERNAL_API', 'BUSINESS_LOGIC', 'SYSTEM', 'NETWORK', 'PERFORMANCE', 'SECURITY', 'UNKNOWN', name='errorcategory'),
               comment='Error category for classification',
               existing_comment='Error category for organization',
               existing_nullable=False)
    op.alter_column('error_logs', 'stack_trace',
               existing_type=sa.TEXT(),
               comment='Full stack trace',
               existing_comment='Full stack trace of the error',
               existing_nullable=True)
    op.alter_column('error_logs', 'error_message',
               existing_type=sa.TEXT(),
               comment='Error message',
               existing_comment='Error message or description',
               existing_nullable=False)
    op.alter_column('error_logs', 'error_type',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               comment='Error type/class name',
               existing_comment='Type/class of error',
               existing_nullable=False)
    op.alter_column('error_logs', 'resolved_by_admin_id',
               existing_type=sa.UUID(),
               comment='Admin user who resolved the error',
               existing_comment='Super admin who resolved the error',
               existing_nullable=True)
    op.alter_column('error_logs', 'user_id',
               existing_type=sa.UUID(),
               comment='User ID if error is user-specific',
               existing_comment='User who encountered the error (if applicable)',
               existing_nullable=True)
    op.alter_column('error_logs', 'tenant_id',
               existing_type=sa.UUID(),
               comment='Tenant ID for tenant-specific errors',
               existing_comment='Reference to tenant (null for system-wide errors)',
               existing_nullable=True)
    op.drop_column('error_logs', 'acknowledged_at')
    op.drop_column('error_logs', 'environment')
    op.drop_column('error_logs', 'client_ip')
    op.drop_column('error_logs', 'request_method')
    op.drop_column('error_logs', 'request_url')
    op.create_table('activity_logs',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True, comment='User who performed the action (null for system actions)'),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment="Action type (e.g., 'user_created', 'invoice_updated')"),
    sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment="Type of resource affected (e.g., 'user', 'invoice', 'customer')"),
    sa.Column('resource_id', sa.UUID(), autoincrement=False, nullable=True, comment='ID of the affected resource'),
    sa.Column('details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='JSON object with action details and metadata'),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True, comment='IP address of the request'),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True, comment='User agent string from the request'),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Session identifier'),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Action status (success, failed, pending)'),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True, comment='Error message if action failed'),
    sa.Column('duration_ms', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Action duration in milliseconds'),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False, comment='Primary key UUID'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record last update timestamp'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Soft delete flag'),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False, comment='Tenant ID for multi-tenant data isolation'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='activity_logs_tenant_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='activity_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='activity_logs_pkey')
    )
    op.create_index('ix_activity_logs_user_id', 'activity_logs', ['user_id'], unique=False)
    op.create_index('ix_activity_logs_tenant_id', 'activity_logs', ['tenant_id'], unique=False)
    op.create_index('ix_activity_logs_resource_type', 'activity_logs', ['resource_type'], unique=False)
    op.create_index('ix_activity_logs_resource_id', 'activity_logs', ['resource_id'], unique=False)
    op.create_index('ix_activity_logs_action', 'activity_logs', ['action'], unique=False)
    op.create_index('idx_activity_log_tenant_user', 'activity_logs', ['tenant_id', 'user_id'], unique=False)
    op.create_index('idx_activity_log_tenant_resource', 'activity_logs', ['tenant_id', 'resource_type', 'resource_id'], unique=False)
    op.create_index('idx_activity_log_tenant_date', 'activity_logs', ['tenant_id', 'created_at'], unique=False)
    op.create_index('idx_activity_log_tenant_action', 'activity_logs', ['tenant_id', 'action'], unique=False)
    op.create_index('idx_activity_log_status', 'activity_logs', ['status'], unique=False)
    op.create_index('idx_activity_log_ip', 'activity_logs', ['ip_address'], unique=False)
    # ### end Alembic commands ###